<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2012 Cho Hyun Jong.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
  
  Contributors:
      Cho Hyun Jong - initial API and implementation
-->

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
    
<!-- 

	엔지디비는 현재 SQLite, CUBRID 두개의 디비를 지원합니다.
	
 -->

<sqlMap namespace="Tadpole-System-Common">
    
<!-- 
	=====================================================================
	SYSTEM QUERY
	=====================================================================
 -->
<select id="system_information" resultClass="com.hangum.tadpole.dao.system.TadpoleSystemDAO">
    SELECT * FROM tadpole_system
</select>

<!-- 
	UPDATE System version 
 -->
<update id="update_system" parameterClass="com.hangum.tadpole.dao.system.TadpoleSystemDAO">
    UPDATE tadpole_system SET
		major_version = #major_version#, sub_version = #sub_version# 
</update>

<!-- 
	신규 시스템 정보를 입력합니다.
 -->
<insert id="newSystem" parameterClass="com.hangum.tadpole.dao.system.TadpoleSystemDAO">
	INSERT INTO tadpole_system(name, major_version, sub_version, information)
	VALUES (#name#, #major_version#, #sub_version#, #information#)    
</insert>
    
<!-- 
	============================================================================================================================
	user group
	============================================================================================================================
 -->
<select id="isUserGroup" resultClass="com.hangum.tadpole.dao.system.UserGroupDAO" parameterClass="com.hangum.tadpole.dao.system.UserGroupDAO">
	SELECT name 
	FROM user_group 
	WHERE 
		name = #name#
</select>

<!-- 
	신규 유저 등록
 -->
<insert id="newGroup" parameterClass="com.hangum.tadpole.dao.system.UserGroupDAO">
	INSERT INTO user_group (seq, name)
	VALUES((select max(seq) from user_group)+1,  #name#)
	
	<selectKey keyProperty="seq" resultClass="int">
		select max(seq) from user_group 
	</selectKey>
</insert>

<select id ="userDBList" resultClass="com.hangum.tadpole.dao.system.UserGroupDAO">
	SELECT * 
	FROM user_group
	WHERE delYn = 'NO'
</select> 

<!-- 
	그룹 seq로 이름
 -->
<select id="findGroupName" resultClass="java.lang.String" parameterClass="java.lang.Integer">
	SELECT name
	FROM user_group
	WHERE seq = #seq#
</select>

<!--
	user가 있는지 중복 검사 합니다. 
 -->
<select id="isUser" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT email 
	FROM users 
	WHERE 
		email = #email#
</select>

<!-- 
	신규 유저 등록
 -->
<insert id="newUser" parameterClass="com.hangum.tadpole.dao.system.UserDAO">
	INSERT INTO users(group_seq, email, passwd, name, user_type, approval_yn)
	VALUES( #group_seq#, #email#, #passwd#, #name#, #user_type#, #approval_yn#)
	
	<selectKey resultClass="com.hangum.tadpole.dao.system.UserDAO">
		select * from users where email = #email# 
	</selectKey>
</insert>

<!-- 
	로그인
 -->
<select id="login" resultClass="com.hangum.tadpole.dao.system.UserDAO" parameterClass="com.hangum.tadpole.dao.system.UserDAO">
	SELECT * 
	FROM users 
	WHERE 
		email = #email# AND 
		passwd = #passwd#
</select>

<!-- userDB의 manager 권한 리스트 -->
<select id="groupManager" resultClass="com.hangum.tadpole.dao.system.UserDAO" parameterClass="java.lang.Integer">
	select * from users
	where group_seq = #group_seq#
	and user_type='MANAGER'
</select>

<!-- 
	초기 로그인시 유저가 한명이명 인진 조사한다.
	한명이면 로그인화면에 디폴트 유저를 출력해 주기위해서....
 -->
<select id="loginUserCount" resultClass="java.lang.Integer">
	SELECT count(*)
	FROM users
</select>
<select id="onlyOnUser" resultClass="com.hangum.tadpole.dao.system.UserDAO" parameterClass="com.hangum.tadpole.dao.system.UserDAO">
	SELECT * 
	FROM users 
</select>

<!-- 
	권한별 유저 리스트
 -->
 <select id="userListPermissions" resultClass="com.hangum.tadpole.dao.system.ext.UserGroupAUserDAO">
 SELECT a.name user_group_name, 
 	b.seq, group_seq, email, passwd, b.name, user_type, approval_yn, b.delYn, b.create_time 
 FROM user_group a, users b
 WHERE a.seq = b.group_seq
 ORDER BY email
 </select>
 
 <select id="userListGroup" resultClass="com.hangum.tadpole.dao.system.ext.UserGroupAUserDAO" parameterClass="java.lang.Integer">
 SELECT a.name user_group_name, 
 	b.seq, group_seq, email, passwd, b.name, user_type, approval_yn, b.delYn, b.create_time 
 FROM user_group a, users b
 WHERE a.seq = b.group_seq
 	AND b.group_seq = #group_seq#
 ORDER BY email
 </select>
 
<!-- 
	유저의 권한 데이터를 수정합니다.
 -->
<update id="updateUserPermission" parameterClass="com.hangum.tadpole.dao.system.UserDAO">
	UPDATE users SET
		approval_yn = #approval_yn#, delYn = #delYn#
	WHERE seq = #seq#
</update>

<!-- 
	유저의 패스워드 번경
 -->
<update id="updateUserPassword" parameterClass="com.hangum.tadpole.dao.system.UserDAO">
	UPDATE users SET
		passwd = #passwd#
	WHERE seq = #seq#
</update>

<!-- 
	유저를 삭제합니다.
 -->
<delete id="deleteUser" parameterClass="com.hangum.tadpole.dao.system.UserDAO">
	DELETE FROM users WHERE email = #email#
</delete>

<!-- 
	============================================================================================================================
	user db
	============================================================================================================================
 -->
 <!-- 
 		신규디비 등록시 이미 등록되어 있는지 검사합니다.
  -->
 <select id="isAlreadyExistDB" resultClass="com.hangum.tadpole.dao.system.UserDBDAO" parameterClass="java.util.Map">
 	SELECT *
 	FROM user_db
 	WHERE user_seq = #user_seq# AND
 		url = #url# AND
 		users = #users#  AND
		delYn = 'NO'
 </select>
 
 <!-- 
 	유저디비 그룹정보를 가져옵니다.
  -->
 <select id="userDBGroup" resultClass="java.lang.String" parameterClass="java.lang.Integer">
 	SELECT group_name
 	FROM user_db
 	WHERE 
		user_seq = #user_seq# AND
		delYn = 'NO'
 	group by group_name 
 </select>
 
 <!-- 
	1) userDB 중복 저장 용도
	2) 저장 후 seq가져오는 용도로 사용
 -->
<select id="isUserDB" resultClass="com.hangum.tadpole.dao.system.UserDBDAO" parameterClass="com.hangum.tadpole.dao.system.UserDBDAO">
	SELECT * FROM user_db 
	WHERE 
		user_seq = #user_seq# and 
		db = #db# and 
		group_name = #group_name# and
		display_name = #display_name#
	ORDER BY display_name
</select>

<!--  UserDB의 리스트 -->
<select id="userDB" resultClass="com.hangum.tadpole.dao.system.UserDBDAO" parameterClass="java.lang.Integer">
	SELECT * FROM user_db 
	WHERE 
		user_seq = #user_seq# AND
		delYn = 'NO'
	ORDER BY group_name
</select>

<insert id="userDBInsert" parameterClass="com.hangum.tadpole.dao.system.UserDBDAO">
	INSERT INTO user_db(seq, user_seq, operation_type, types, url, db, group_name, display_name, host, port, locale, passwd, users, ext1, ext2, ext3)
	VALUES( (select max(seq) from user_db)+1 , #user_seq#, #operation_type#, #types#, #url#, #db#, #group_name#, #display_name#, #host#, #port#, #locale#, #passwd#, #users#, #ext1#, #ext2#, #ext3#)
</insert>

<!--
	db type은 업데이트 되지 않도록 합니다. 
	types 		= #types#,
 -->
<update id="userDBUpdate" parameterClass="com.hangum.tadpole.dao.system.UserDBDAO">
	UPDATE user_db SET		 
		url 		= #url#, 
		db			= #db#,  
		group_name 	= #group_name#, 
		display_name 	= #display_name#, 
		host			= #host#, 
		port			= #port#, 
		locale			= #locale#, 
		passwd			= #passwd#,  
		users			= #users#,
		ext1			= #ext1#,
		ext2			= #ext2#,
		ext3			= #ext3#
	WHERE seq = #seq#
	
</update>

<update id="userDBDelete" parameterClass="java.lang.Integer">
	UPDATE user_db SET
		delYn = 'YES'
	WHERE seq = #seq#
</update>

<!-- 
	============================================================================================================================
	user db resource
	============================================================================================================================
 -->
<insert id="userDbResourceInsert" parameterClass="com.hangum.tadpole.dao.system.UserDBResourceDAO">
	INSERT INTO user_db_resource(seq, user_seq, types, db_seq, filename, duration_mill, execution_result)
	VALUES( (select max(seq) from user_db_resource)+1, #user_seq#, #types#, #db_seq#, #filename#, #duration_mill#, #execution_result#)
	
	<selectKey resultClass="com.hangum.tadpole.dao.system.UserDBResourceDAO">
		SELECT * 
		FROM user_db_resource 
		WHERE user_seq = #user_seq# AND 
			types = #types# AND 
			db_seq = #db_seq# AND 
			filename = #filename#
	</selectKey>
</insert>

<select id="userDbResourceTree" resultClass="com.hangum.tadpole.dao.system.UserDBResourceDAO" parameterClass="com.hangum.tadpole.dao.system.UserDBDAO">
	SELECT * FROM user_db_resource
	WHERE
		user_seq = #user_seq# and
		db_seq = #seq#  AND
		types in ('ERD', 'SQL') AND
		delYn = 'NO'		
	ORDER BY filename
</select>

<select id="userDbResource" resultClass="com.hangum.tadpole.dao.system.UserDBResourceDAO" parameterClass="com.hangum.tadpole.dao.system.UserDBResourceDAO">
	SELECT * FROM user_db_resource
	WHERE
		seq = #seq#
</select>

<!-- 
	1) 데이터 중복 검사쿼리
	2) 데이터 저장 후 seq를 가져오는 용도로도 사용
 -->
<select id="userDBResourceDuplication" resultClass="com.hangum.tadpole.dao.system.UserDBResourceDAO" parameterClass="com.hangum.tadpole.dao.system.UserDBResourceDAO">
	SELECT * FROM user_db_resource
	WHERE
		types = #types# 			and
		user_seq = #user_seq# 	and
		db_seq = #db_seq# 		and
		filename = #filename#
</select>

<update id="userDBResourceDelete" parameterClass="com.hangum.tadpole.dao.system.UserDBResourceDAO">
	UPDATE user_db_resource SET
		delYn = 'YES'
	WHERE seq = #seq#
</update>

<!-- 
	resource data를 얻습니다.
 -->
<select id="userDBResourceData" resultClass="com.hangum.tadpole.dao.system.UserDBResourceDataDAO" parameterClass="com.hangum.tadpole.dao.system.UserDBResourceDAO">
	SELECT * FROM user_db_resource_data
	WHERE
		user_db_resource_seq = #seq#
	ORDER BY seq
</select>

<!-- 
	resource data를 저장합니다.
 -->
<insert id="userDbResourceDataInsert" parameterClass="com.hangum.tadpole.dao.system.UserDBResourceDataDAO">
	INSERT INTO user_db_resource_data(seq, user_db_resource_seq, datas)
	VALUES( (select max(seq) from user_db_resource_data)+1, #user_db_resource_seq#, #datas#)
</insert>

<!-- 
	resource data를 삭제합니다.
 -->
<delete id="userDbResourceDataDelete" parameterClass="java.lang.Integer">
	DELETE FROM user_db_resource_data
	WHERE
		user_db_resource_seq = #seq#
</delete>

<!-- 
	=========================================================================================================
	user_info_data 정보를 설정합니다.
	=========================================================================================================
 -->
<select id="allUserInfoData" resultClass="com.hangum.tadpole.dao.system.UserInfoDataDAO" parameterClass="java.lang.Integer">
	SELECT * FROM user_info_data
	WHERE
		user_seq = #user_seq#
</select>

<!-- 
	사용자 정보를 가져온다. 
 -->
<select id="getUserInfoData" resultClass="com.hangum.tadpole.dao.system.UserInfoDataDAO" parameterClass="com.hangum.tadpole.dao.system.UserInfoDataDAO">
	SELECT * FROM user_info_data
	WHERE
		user_seq = #user_seq# AND
		name = #name#
</select>

<!-- 
	사용자 정보를 저장한다. 
 -->
<insert id="userInfoDataInsert" parameterClass="com.hangum.tadpole.dao.system.UserInfoDataDAO">
	INSERT INTO user_info_data(seq, user_seq, db_seq, name, value0, value1, value2, value3, value4, value5)
	VALUES( (select max(seq) from user_info_data)+1, #user_seq#, #db_seq#, #name#, #value0#, #value1#, #value2#, #value3#, #value4#, #value5# )
</insert>

<!-- 
	사용자 정보를 수정합니다.
 -->
<update id="userInfoDataUpdate" parameterClass="com.hangum.tadpole.dao.system.UserInfoDataDAO">
	UPDATE user_info_data 
	SET
		value0 = #value0#,
		value1 = #value1#,
		value2 = #value2#,
		value3 = #value3#,
		value4 = #value4#,
		value5 = #value5#
	WHERE user_seq = #user_seq# AND
		name = #name#
</update>

</sqlMap>

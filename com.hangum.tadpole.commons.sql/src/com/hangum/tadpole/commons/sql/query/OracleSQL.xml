<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2012 Cho Hyun Jong.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
  
  Contributors:
      Cho Hyun Jong - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
    
    
<!-- 
		Tadpole for DB Tools - Oracle DB Define		
		Oracle ojdbc6.jar로 작업했으며, 테스트 버전은 10g - 11g까지 입니다. - @hangum
		
		@nilriri
 -->

<sqlMap namespace="Oracle_query">

<!-- 
	db의 모든 table 이름
	
	컬럼 설명
	TNAME 		: 테이블 명
 -->
<select id="tableList" resultClass="com.hangum.tadpole.dao.mysql.TableDAO" parameterClass="java.lang.String">
  SELECT 
      T.table_name AS "NAME"
      , S.COMMENTS AS "COMMENT"
    FROM user_tables T 
      LEFT JOIN USER_TAB_COMMENTS S
            ON S.TABLE_NAME = T.TABLE_NAME
ORDER BY T.table_name
</select>

<!-- 
	특정 table의 table이나 view 컬럼 정보
	
	컬럼 설명
	Field			: 컬럼 명
	Type			: 컬럼 타입
	Null			: Null 유무 (예: YES,NO)
	Key				: primary key, foreign key(예: PK, FK)
	Default			: 기본값
	Extra			: 특수컬럼(예: auto_increment)
 -->
<select id="tableColumnList" resultClass="com.hangum.tadpole.dao.mysql.TableColumnDAO" parameterClass="java.util.HashMap">
	 SELECT C.COLUMN_NAME AS "FIELD",
		C.DATA_TYPE || CASE WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 AND C.DATA_SCALE > 0 THEN '('||C.DATA_PRECISION || ',' || C.DATA_SCALE||')'
		WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 THEN '('||C.DATA_PRECISION ||')'
		WHEN C.DATA_TYPE = 'DATE' THEN '' ELSE '(' || TO_CHAR(C.DATA_LENGTH) || ')' END AS "TYPE",
		CASE WHEN C.NULLABLE = 'Y' THEN 'YES' ELSE 'NO' END AS "NULL",
		CASE P.CONSTRAINT_TYPE WHEN 'P' THEN 'PK'
		WHEN 'R' THEN 'FK'
				ELSE '' END AS "KEY",
		C.DATA_DEFAULT AS "DEFAULT", '' AS EXTRA, S.COMMENTS AS "COMMENT"
	FROM USER_TAB_COLUMNS C
		LEFT JOIN USER_IND_COLUMNS D ON C.TABLE_NAME = D.TABLE_NAME AND C.COLUMN_NAME = D.COLUMN_NAME
		LEFT JOIN USER_CONSTRAINTS P ON D.TABLE_NAME = P.TABLE_NAME AND D.INDEX_NAME = P.INDEX_NAME
		LEFT JOIN USER_COL_COMMENTS S ON S.TABLE_NAME = C.TABLE_NAME AND S.COLUMN_NAME = C.COLUMN_NAME 
	WHERE C.TABLE_NAME = #table# 
	ORDER BY C.COLUMN_ID
</select>

<!-- 
	erd에서 테이블간의 관계를 표시하기 위한 정보
	
	컬럼 설명
	constraint_name		:	 인덱스 이름
	table_name			:	 소스 테이블 이름
	column_name			:	 소스 테이블 컬럼
	
	referenced_table_name	:	타켓 테이블 이름
	referenced_column_name	: 	타켓 테이블 컬럼
 -->
<select id="referencedTableList"  resultClass="com.hangum.tadpole.dao.mysql.ReferencedTableDAO" parameterClass="java.lang.String">
 SELECT t.constraint_name ,
        t.table_name,
       max(decode(rno,1,t.column_name)) ||','|| max(decode(rno,2,t.column_name)) AS column_name ,
                                                max(r.table_name) AS referenced_table_name ,
                                                max(r.columns) AS referenced_column_name
FROM
  ( SELECT C.table_name ,
           C.CONSTRAINT_NAME ,
           S.column_name ,
           C.R_CONSTRAINT_NAME ,
           COUNT(*)OVER(PARTITION BY C.CONSTRAINT_NAME) CNT ,
                                                        ROW_NUMBER()OVER(PARTITION BY C.CONSTRAINT_NAME
                                                                         ORDER BY S.COLUMN_NAME) RNO
   FROM user_constraints C
   LEFT JOIN USER_CONS_COLUMNS S ON C.CONSTRAINT_NAME = S.CONSTRAINT_NAME
   AND C.TABLE_NAME = S.TABLE_NAME
   WHERE C.CONSTRAINT_TYPE = 'R' ) t
LEFT JOIN
  (SELECT x.table_name,
          x.constraint_name ,
          max(decode(x.rno,1,COLUMN_NAME))||',' || max(decode(x.rno,2,COLUMN_NAME)) columns
   FROM
     (SELECT s.table_name ,
             s.constraint_name ,
             s.COLUMN_NAME , ROW_NUMBER()OVER(PARTITION BY s.CONSTRAINT_NAME
                                              ORDER BY S.COLUMN_NAME) RNO
      FROM USER_CONS_COLUMNS S)x
   GROUP BY x.table_name,
            x.constraint_name ) R ON t.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME
WHERE t.table_name in ( $table$ )            
GROUP BY t.table_name,
         t.constraint_name
</select>

<!-- 
	모든 관계 테이블 목록을 가져옵니다.
	(referencedTableList와 쿼리는 같음, 틀린 점은 모든 테이블의 관계를 가져 옵니다. erd에서 모든 테이블 관계 보여주는 기능 사용 용도)
	
	컬럼 설명
	constraint_name		:	 인덱스 이름
	table_name			:	 소스 테이블 이름
	column_name			:	 소스 테이블 컬럼
	
	referenced_table_name	:	타켓 테이블 이름
	referenced_column_name	: 	타켓 테이블 컬럼
 -->
<select id="referencedTableListALL"  resultClass="com.hangum.tadpole.dao.mysql.ReferencedTableDAO" >
 SELECT t.table_name,
       t.constraint_name ,
       max(decode(rno,1,t.column_name)) ||','|| max(decode(rno,2,t.column_name)) AS column_name ,
                                                max(r.table_name) AS referenced_table_name ,
                                                max(r.columns) AS referenced_column_name
FROM
  ( SELECT C.table_name ,
           C.CONSTRAINT_NAME ,
           S.column_name ,
           C.R_CONSTRAINT_NAME ,
           COUNT(*)OVER(PARTITION BY C.CONSTRAINT_NAME) CNT ,
                                                        ROW_NUMBER()OVER(PARTITION BY C.CONSTRAINT_NAME
                                                                         ORDER BY S.COLUMN_NAME) RNO
   FROM user_constraints C
   LEFT JOIN USER_CONS_COLUMNS S ON C.CONSTRAINT_NAME = S.CONSTRAINT_NAME
   AND C.TABLE_NAME = S.TABLE_NAME
   WHERE C.CONSTRAINT_TYPE = 'R' ) t
LEFT JOIN
  (SELECT x.table_name,
          x.constraint_name ,
          max(decode(x.rno,1,COLUMN_NAME))||',' || max(decode(x.rno,2,COLUMN_NAME)) columns
   FROM
     (SELECT s.table_name ,
             s.constraint_name ,
             s.COLUMN_NAME , ROW_NUMBER()OVER(PARTITION BY s.CONSTRAINT_NAME
                                              ORDER BY S.COLUMN_NAME) RNO
      FROM USER_CONS_COLUMNS S)x
   GROUP BY x.table_name,
            x.constraint_name ) R ON t.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME
GROUP BY t.table_name,
         t.constraint_name
</select>
	
<!-- 
	db의 view 정보
	
	컬럼 설명
	oebjt_name		: view 이름
 -->
<select id="viewList" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT o.object_name AS "View Name"
    FROM user_objects o
   WHERE o.object_type = 'VIEW'
ORDER BY 1	
</select>
	
<!-- 
	index 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	table_name			:  	테이블 명
    index_name			:	인덱스 명
    column_name			:	컬럼 명
    column_position		: 
    column_length		:
    char_length			:
    descend				:	
    uniqueness			:
    table_owner			:
    constraint_type		:
    status				:
    #table_schema# AS table_schema
 -->
 <select id="indexList" resultClass="com.hangum.tadpole.dao.mysql.InformationSchemaDAO" parameterClass="java.lang.String">
  SELECT m.table_name,
         m.index_name,
         m.column_name,
         m.column_position,
         m.column_length,
         m.char_length,
         m.descend,
         i.uniqueness,
         i.table_owner,
         c.constraint_type,
         c.status,
         #table_schema# AS table_schema
    FROM user_ind_columns m
         LEFT JOIN user_indexes i
            ON m.table_name = i.table_name AND m.index_name = i.index_name
         LEFT JOIN user_constraints c
            ON i.table_name = c.table_name AND i.index_name = c.constraint_name
   WHERE c.status = 'ENABLED'
ORDER BY m.table_name, m.index_name, m.column_position        
</select>

<!-- 
	procedure 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="procedureList" resultClass="com.hangum.tadpole.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
FROM    user_objects s
WHERE   s.object_type IN ('PROCEDURE', 'PACKAGE')
ORDER BY s.object_type DESC, s.object_name 
</select>

<!-- 
	function 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="functionList" resultClass="com.hangum.tadpole.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
FROM    user_objects s
WHERE   s.object_type = 'FUNCTION'
ORDER BY s.object_name 
</select>

<!-- 
	show 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	trigger			: trigger name	
	event			: event
	table			: table name
	statement		:
	timing			:
	created			:
	sql_mode		:
	definer			:
	character_set_client	:	
	collation_connection	:
	database				:
	collation				:
 -->
<select id="triggerList" resultClass="com.hangum.tadpole.dao.mysql.TriggerDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
FROM    user_objects s
WHERE   s.object_type = 'TRIGGER'
ORDER BY s.object_name 
</select>

<!-- 
	show function, object
	
	컬럼 설명
	object_name		: object 이름
	object_id   	: object id
	create			: 생성일시
	text			: function text
 -->
<select id="functionSource" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT O.OBJECT_NAME ,
		O.OBJECT_ID ,
		O.CREATED ,
		S.TEXT
	FROM user_OBJECTS O
		LEFT JOIN USER_SOURCE S
		ON O.OBJECT_NAME = S.NAME
	WHERE 1 =1
		O.OBJECT_NAME = #object_name#
	ORDER BY O.OBJECT_NAME, S.LINE
</select>

<!-- 
	지정한 컬럼에 정의된 제약조건 목록을 조회한다.
	
 -->
<select id="constraintList" resultClass="com.hangum.tadpole.dao.mysql.ConstraintDAO" parameterClass="java.util.HashMap">
  SELECT SUBSTR ( a.column_name, 1, 15 ) column_name 
       , b.constraint_type constraint_type 
       , DECODE ( b.constraint_type, 'P', 'PRIMARY KEY', 'U', 'UNIQUE KEY', 'C', 'CHECK OR NOT NULL', 'R', 'FOREIGN KEY' ) constraint_type_nm 
       , a.constraint_name constraint_name 
       , b.search_condition 
       , b.status 
       , r.table_name AS ref_table 
    FROM USER_CONS_COLUMNS a 
         INNER JOIN USER_CONSTRAINTS b 
            ON a.table_name = b.table_name 
           AND a.constraint_name = b.constraint_name 
         LEFT JOIN USER_CONSTRAINTS r 
            ON b.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME 
   WHERE 1=1 
   AND a.table_name = UPPER ( #table# ) 
   AND a.column_name = UPPER ( #column# ) 
ORDER BY 1, 2 
</select>

</sqlMap>

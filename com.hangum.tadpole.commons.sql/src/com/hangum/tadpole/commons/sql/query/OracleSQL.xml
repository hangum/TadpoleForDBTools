<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2013 hangum.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      hangum - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
    
    
<!-- 
		Tadpole DB Hub - Oracle DB Define		
		Oracle ojdbc6.jar로 작업했으며, 테스트 버전은 10g - 11g까지 입니다. - @hangum
		
		@nilriri
 -->

<sqlMap namespace="Oracle_query">

<!--
	database connection test 
 -->
<select id="connectionCheck" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT sysdate	FROM dual  
</select>

<!-- 
	db의 모든 table 이름
	
	컬럼 설명
	TNAME 		: 테이블 명
 -->
<select id="tableList" resultClass="com.hangum.tadpole.dao.mysql.TableDAO" parameterClass="java.lang.String">
  SELECT 
      T.table_name AS "NAME"
      , S.COMMENTS AS "COMMENT"
    FROM user_tables T 
      LEFT JOIN USER_TAB_COMMENTS S
            ON S.TABLE_NAME = T.TABLE_NAME
ORDER BY T.table_name
</select>

<!-- 
	특정 table의 table이나 view 컬럼 정보
	
	컬럼 설명
	Field			: 컬럼 명
	Type			: 컬럼 타입
	Null			: Null 유무 (예: YES,NO)
	Key				: primary key, foreign key(예: PK, FK)
	Default			: 기본값
	Extra			: 특수컬럼(예: auto_increment)
 -->
<select id="tableColumnList" resultClass="com.hangum.tadpole.dao.mysql.TableColumnDAO" parameterClass="java.util.HashMap">
     SELECT C.COLUMN_NAME AS "FIELD",
        C.DATA_TYPE || CASE WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 AND C.DATA_SCALE > 0 THEN '('||C.DATA_PRECISION || ',' || C.DATA_SCALE||')'
        WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 THEN '('||C.DATA_PRECISION ||')'
        WHEN C.DATA_TYPE = 'DATE' THEN '' ELSE '(' || TO_CHAR(C.DATA_LENGTH) || ')' END AS "TYPE",
        CASE WHEN C.NULLABLE = 'Y' THEN 'YES' ELSE 'NO' END AS "NULL",
       (SELECT CASE P.CONSTRAINT_TYPE WHEN 'P' THEN 'PK'     WHEN 'R' THEN 'FK'                 ELSE '' END
        FROM USER_IND_COLUMNS D 
                LEFT JOIN USER_CONSTRAINTS P ON D.TABLE_NAME = P.TABLE_NAME AND D.INDEX_NAME = P.INDEX_NAME
        WHERE C.TABLE_NAME = D.TABLE_NAME 
            AND C.COLUMN_NAME = D.COLUMN_NAME
            AND  P.CONSTRAINT_TYPE IN ( 'P' , 'R')    ) AS "KEY",
       C.DATA_DEFAULT AS "DEFAULT", '' AS EXTRA, S.COMMENTS AS "COMMENT"
   FROM USER_TAB_COLUMNS C
        LEFT JOIN USER_COL_COMMENTS S ON S.TABLE_NAME = C.TABLE_NAME AND S.COLUMN_NAME = C.COLUMN_NAME 
    WHERE C.TABLE_NAME = #table# 
    ORDER BY C.COLUMN_ID
</select>

<!-- 
	erd에서 테이블간의 관계를 표시하기 위한 정보
	
	컬럼 설명
	constraint_name		:	 인덱스 이름
	table_name			:	 소스 테이블 이름
	column_name			:	 소스 테이블 컬럼
	
	referenced_table_name	:	타켓 테이블 이름
	referenced_column_name	: 	타켓 테이블 컬럼
 -->
<select id="referencedTableList"  resultClass="com.hangum.tadpole.dao.mysql.ReferencedTableDAO" parameterClass="java.lang.String">
 SELECT t.constraint_name ,
        t.table_name,
       max(decode(rno,1,t.column_name)) ||','|| max(decode(rno,2,t.column_name)) AS column_name ,
                                                max(r.table_name) AS referenced_table_name ,
                                                max(r.columns) AS referenced_column_name
FROM
  ( SELECT C.table_name ,
           C.CONSTRAINT_NAME ,
           S.column_name ,
           C.R_CONSTRAINT_NAME ,
           COUNT(*)OVER(PARTITION BY C.CONSTRAINT_NAME) CNT ,
                                                        ROW_NUMBER()OVER(PARTITION BY C.CONSTRAINT_NAME
                                                                         ORDER BY S.COLUMN_NAME) RNO
   FROM user_constraints C
   LEFT JOIN USER_CONS_COLUMNS S ON C.CONSTRAINT_NAME = S.CONSTRAINT_NAME
   AND C.TABLE_NAME = S.TABLE_NAME
   WHERE C.CONSTRAINT_TYPE = 'R' ) t
LEFT JOIN
  (SELECT x.table_name,
          x.constraint_name ,
          max(decode(x.rno,1,COLUMN_NAME))||',' || max(decode(x.rno,2,COLUMN_NAME)) columns
   FROM
     (SELECT s.table_name ,
             s.constraint_name ,
             s.COLUMN_NAME , ROW_NUMBER()OVER(PARTITION BY s.CONSTRAINT_NAME
                                              ORDER BY S.COLUMN_NAME) RNO
      FROM USER_CONS_COLUMNS S)x
   GROUP BY x.table_name,
            x.constraint_name ) R ON t.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME
WHERE t.table_name in ( $table$ )            
GROUP BY t.table_name,
         t.constraint_name
</select>

<!-- 
	모든 관계 테이블 목록을 가져옵니다.
	(referencedTableList와 쿼리는 같음, 틀린 점은 모든 테이블의 관계를 가져 옵니다. erd에서 모든 테이블 관계 보여주는 기능 사용 용도)
	
	컬럼 설명
	constraint_name		:	 인덱스 이름
	table_name			:	 소스 테이블 이름
	column_name			:	 소스 테이블 컬럼
	
	referenced_table_name	:	타켓 테이블 이름
	referenced_column_name	: 	타켓 테이블 컬럼
 -->
<select id="referencedTableListALL"  resultClass="com.hangum.tadpole.dao.mysql.ReferencedTableDAO" >
 SELECT t.table_name,
       t.constraint_name ,
       max(decode(rno,1,t.column_name)) ||','|| max(decode(rno,2,t.column_name)) AS column_name ,
                                                max(r.table_name) AS referenced_table_name ,
                                                max(r.columns) AS referenced_column_name
FROM
  ( SELECT C.table_name ,
           C.CONSTRAINT_NAME ,
           S.column_name ,
           C.R_CONSTRAINT_NAME ,
           COUNT(*)OVER(PARTITION BY C.CONSTRAINT_NAME) CNT ,
                                                        ROW_NUMBER()OVER(PARTITION BY C.CONSTRAINT_NAME
                                                                         ORDER BY S.COLUMN_NAME) RNO
   FROM user_constraints C
   LEFT JOIN USER_CONS_COLUMNS S ON C.CONSTRAINT_NAME = S.CONSTRAINT_NAME
   AND C.TABLE_NAME = S.TABLE_NAME
   WHERE C.CONSTRAINT_TYPE = 'R' ) t
LEFT JOIN
  (SELECT x.table_name,
          x.constraint_name ,
          max(decode(x.rno,1,COLUMN_NAME))||',' || max(decode(x.rno,2,COLUMN_NAME)) columns
   FROM
     (SELECT s.table_name ,
             s.constraint_name ,
             s.COLUMN_NAME , ROW_NUMBER()OVER(PARTITION BY s.CONSTRAINT_NAME
                                              ORDER BY S.COLUMN_NAME) RNO
      FROM USER_CONS_COLUMNS S)x
   GROUP BY x.table_name,
            x.constraint_name ) R ON t.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME
GROUP BY t.table_name,
         t.constraint_name
</select>
	
<!-- 
	db의 view 정보
	
	컬럼 설명
	oebjt_name		: view 이름
 -->
<select id="viewList" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT o.object_name AS "View Name"
    FROM user_objects o
   WHERE o.object_type = 'VIEW'
ORDER BY 1	
</select>
	
<!-- 
	index 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	table_name			:  	테이블 명
    index_name			:	인덱스 명
    column_name			:	컬럼 명
    column_position		: 
    column_length		:
    char_length			:
    descend				:	
    uniqueness			:
    table_owner			:
    constraint_type		:
    status				:
    #table_schema# AS table_schema
 -->
 <select id="indexList" resultClass="com.hangum.tadpole.dao.mysql.InformationSchemaDAO" parameterClass="java.lang.String">
  SELECT i.table_name
        ,i.index_name
        ,i.uniqueness
        ,i.table_owner
        ,i.compression
        ,i.tablespace_name
        ,i.logging
        ,i.pct_free
        ,i.ini_trans
        ,i.max_trans
        ,i.initial_extent
        ,i.min_extents
        ,i.max_extents
        ,i.pct_increase
        ,i.buffer_pool
        ,CASE
            WHEN c.constraint_type = 'P' THEN 'PK'
            WHEN i.uniqueness = 'UNIQUE' THEN 'UQ'
            ELSE ''
         END
            AS index_type
        ,c.status
        ,#table_schema# AS table_schema
    FROM    user_indexes i
         LEFT JOIN
            user_constraints c
         ON     i.table_name = c.table_name
            AND i.index_name = c.constraint_name
            AND c.status = 'ENABLED'
ORDER BY i.table_name, i.index_name
</select>

 <select id="indexDetailList" resultClass="com.hangum.tadpole.dao.mysql.InformationSchemaDAO" parameterClass="java.util.Map">
  SELECT m.table_name,
         m.index_name,
         m.column_name,
         m.column_position as seq_in_index,
         m.column_length,
         m.char_length,
         m.descend as "comment",
         i.uniqueness,
         i.table_owner,
         i.table_owner AS table_schema
    FROM user_ind_columns m
         LEFT JOIN user_indexes i
            ON m.table_name = i.table_name AND m.index_name = i.index_name
   WHERE 1=1
     AND m.index_name = UPPER(#index_name#)
ORDER BY m.column_position        
</select>

<!-- 
	procedure 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="procedureList" resultClass="com.hangum.tadpole.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
        , s.status
FROM    user_objects s
WHERE   s.object_type IN ('PROCEDURE', 'PACKAGE')
ORDER BY s.object_type DESC, s.object_name 
</select>

<!-- 
	function 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="functionList" resultClass="com.hangum.tadpole.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
        , s.status
FROM    user_objects s
WHERE   s.object_type = 'FUNCTION'
ORDER BY s.object_name 
</select>

<!-- 
	show 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	trigger			: trigger name	
	event			: event
	table			: table name
	statement		:
	timing			:
	created			:
	sql_mode		:
	definer			:
	character_set_client	:	
	collation_connection	:
	database				:
	collation				:
 -->
<select id="triggerList" resultClass="com.hangum.tadpole.dao.mysql.TriggerDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
        , s.status
FROM    user_objects s
WHERE   s.object_type = 'TRIGGER'
ORDER BY s.object_name 
</select>

<!-- 
	show function, object
	
	컬럼 설명
	object_name		: object 이름
	object_id   	: object id
	create			: 생성일시
	text			: function text
 -->
<select id="functionSource" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT O.OBJECT_NAME ,
		O.OBJECT_ID ,
		O.CREATED ,
		S.TEXT
	FROM user_OBJECTS O
		LEFT JOIN USER_SOURCE S
		ON O.OBJECT_NAME = S.NAME
	WHERE 1 =1
		O.OBJECT_NAME = #object_name#
	ORDER BY O.OBJECT_NAME, S.LINE
</select>

<!-- 
	지정한 컬럼에 정의된 제약조건 목록을 조회한다.
	
 -->
<select id="constraintList" resultClass="com.hangum.tadpole.dao.mysql.ConstraintDAO" parameterClass="java.util.HashMap">
  SELECT SUBSTR ( a.column_name, 1, 15 ) column_name 
       , b.constraint_type constraint_type 
       , DECODE ( b.constraint_type, 'P', 'PRIMARY KEY', 'U', 'UNIQUE KEY', 'C', 'CHECK OR NOT NULL', 'R', 'FOREIGN KEY' ) constraint_type_nm 
       , a.constraint_name constraint_name 
       , b.search_condition 
       , b.status 
       , r.table_name AS ref_table 
    FROM USER_CONS_COLUMNS a 
         INNER JOIN USER_CONSTRAINTS b 
            ON a.table_name = b.table_name 
           AND a.constraint_name = b.constraint_name 
         LEFT JOIN USER_CONSTRAINTS r 
            ON b.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME 
   WHERE 1=1 
   AND a.table_name = UPPER ( #table# ) 
   AND a.column_name = UPPER ( #column# ) 
ORDER BY 1, 2 
</select>

<!-- 
	SESSION LIST
 -->
<select id="sessionList" resultClass="com.hangum.tadpole.dao.mysql.SessionListDAO">
	SHOW PROCESSLIST
</select>

<select id="killProcess" parameterClass="java.lang.String">
	kill #pid#
</select>


<!-- 
	table information
 -->
<select id="tableInformation" resultClass="java.util.HashMap" parameterClass="java.lang.String">
	select table_name, num_rows, table_lock
	from user_tables
</select>

<!-- 
	column information
 -->
<select id="columnInformation" resultClass="java.util.HashMap" parameterClass="java.lang.String">
	select cols.table_name
	       , tbls.comments as table_comment
	        ,cols.column_name
	        ,nullable
	        ,data_type as type
	        ,decode (data_type
	                ,'CHAR', char_length
	                ,'VARCHAR', char_length
	                ,'VARCHAR2', char_length
	                ,'NCHAR', char_length
	                ,'NVARCHAR', char_length
	                ,'NVARCHAR2', char_length
	                ,null)
	            nchar_length
	        ,decode (data_type, 'NUMBER', data_precision + data_scale, data_length) length
	        ,data_precision precision
	        ,data_scale scale
	        ,data_length dlength
	        ,data_default
	        ,coms.comments as column_comment
	        ,data_type_mod
	        ,cols.char_used
	        ,decode (cols.density, null, 'No', 'Yes') histogram
	        ,num_distinct
	        ,num_nulls
	        ,round (density, 5) density
	    from sys.user_tab_cols cols
	    	left join sys.user_col_comments coms on coms.table_name = cols.table_name and coms.column_name = cols.column_name 
	    	left join sys.user_tab_comments tbls on tbls.table_name = cols.table_name
	   where 1 = 1 and cols.hidden_column = 'NO'
	order by cols.table_name, cols.column_id
</select>

<!-- 
	Table DDL Script
 -->
<select id="getTableScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">


SELECT C.TABLE_NAME
     , C.COLUMN_NAME
     , C.DATA_TYPE
     , C.DATA_TYPE_MOD
     , C.DATA_TYPE_OWNER
     , DECODE(C.DATA_TYPE, 'CHAR', C.CHAR_LENGTH,
                         'VARCHAR', C.CHAR_LENGTH,
                         'VARCHAR2', C.CHAR_LENGTH,
                         'NCHAR', C.CHAR_LENGTH,
                         'NVARCHAR', C.CHAR_LENGTH,
                         'NVARCHAR2', C.CHAR_LENGTH,
                         C.DATA_LENGTH) DATA_LENGTH
      , C.DATA_PRECISION
      , C.DATA_SCALE
      , C.NULLABLE
      , C.CHAR_USED
      , USER OWNER
      , C.DATA_DEFAULT
FROM SYS.USER_TAB_COLUMNS C
WHERE 1=1
AND C.TABLE_NAME = UPPER(#table_name#)
ORDER BY C.TABLE_NAME, C.COLUMN_ID


</select>

<!-- 
	Table DDL Script => Primary key list
 -->
 
<select id="getTableScript.pk" resultClass="java.util.HashMap" parameterClass="java.lang.String">
  SELECT C.CONSTRAINT_NAME, CC.COLUMN_NAME
    FROM SYS.DBA_CONS_COLUMNS CC, SYS.DBA_CONSTRAINTS C
   WHERE     C.OWNER = CC.OWNER
         AND C.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
         AND C.TABLE_NAME = CC.TABLE_NAME
         AND C.OWNER = USER
         AND C.TABLE_NAME = UPPER(#table_name#)
         AND C.CONSTRAINT_TYPE = 'P'
ORDER BY CC.POSITION

</select>

<!-- 
	Table DDL Script => Table, Column Comment Script
 -->
 
<select id="getTableScript.comments" resultClass="java.lang.String" parameterClass="java.lang.String">

SELECT    'COMMENT ON TABLE '
       || C.OWNER
       || '.'
       || C.TABLE_NAME
       || ' IS '''
       || C.COMMENTS
       || ''';'
          AS COMMENT_TEXT
  FROM SYS.DBA_TAB_COMMENTS C
 WHERE     C.OWNER = USER
       AND C.COMMENTS IS NOT NULL
       AND C.TABLE_NAME = UPPER(#table_name#)
UNION ALL
SELECT    'COMMENT ON COLUMN '
       || C.OWNER
       || '.'
       || C.TABLE_NAME
       || '.'
       || C.COLUMN_NAME
       || ' IS '''
       || C.COMMENTS
       || ''';'
  FROM SYS.DBA_COL_COMMENTS C
 WHERE     C.OWNER = USER
       AND C.COMMENTS IS NOT NULL
       AND C.TABLE_NAME = UPPER(#table_name#)
  
</select>

<!-- 
	Table DDL Script => View Header
 -->
 
<select id="getViewScript.head" resultClass="java.lang.String" parameterClass="java.lang.String">


  SELECT CASE
            WHEN COLUMN_ID = 1
            THEN
               'CREATE OR REPLACE VIEW ' || TABLE_NAME || ' ( ' || COLUMN_NAME
            WHEN COLUMN_ID &gt;= 1 AND COLUMN_ID &lt; COUNT (COLUMN_ID) OVER ()
            THEN
               ', ' || COLUMN_NAME
            ELSE
               ', ' || COLUMN_NAME || ' ) AS '
         END AS SOURCE_TEXT
    FROM SYS.USER_TAB_COLUMNS C
   WHERE 1 = 1 
   AND TABLE_NAME = UPPER(#view_name#)
ORDER BY TABLE_NAME, COLUMN_ID

</select>

<!-- 
	Table DDL Script => View body 
 -->
 
<select id="getViewScript.body" resultClass="java.lang.String" parameterClass="java.lang.String">
  SELECT V.TEXT AS SOURCE_TEXT
    FROM SYS.USER_VIEWS V
   WHERE 1 = 1 
     AND V.VIEW_NAME = UPPER(#view_name#)
ORDER BY VIEW_NAME

</select>

<!-- 
	Procedure Script 
 -->
 
<select id="getProcedureScript" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT
    b.text AS source_text
  FROM user_objects a 
      INNER JOIN user_source b ON a.object_name = b.name
WHERE 1 = 1
  AND a.object_name = UPPER(#object_name#)
  AND a.object_type = 'PROCEDURE'
ORDER BY b.line
</select>

<!-- 
	Trigger Script 
 -->
 
<select id="getTriggerScript" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'TRIGGER'
ORDER BY B.LINE

</select>

<!-- 
	Trigger Script 
 -->
 
<select id="getFunctionScript" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'FUNCTION'
ORDER BY B.LINE

</select>


<!-- 
	DDL Script object type 
 -->
<!-- 현재는 프로시져탭에서 프로시져와 패키지를 함께 다루고 있으므로 오브젝트 타입을 먼저 체크하기 위한 SQL --> 
<select id="getSourceObjectType" resultClass="java.lang.String" parameterClass="java.lang.String">
  SELECT B.object_type as TYPE 
    FROM user_objects B
   WHERE 1 = 1 
      AND B.object_name = UPPER (#object_name#)
      AND ROWNUM &lt;= 1
</select>

<!-- 
	Package Header Script 
 -->
 
<select id="getPackageScript.head" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'PACKAGE'
ORDER BY B.LINE

</select>

<!-- 
	Package Body Script 
 -->
 
<select id="getPackageScript.body" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'PACKAGE BODY'
ORDER BY B.LINE

</select>

    
<!-- 
	Index Script 
 -->
 
<select id="getIndexScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">

SELECT 
    IC.COLUMN_POSITION
  , I.INDEX_NAME
  , I.TABLE_NAME
  , I.INDEX_TYPE
  , I.TABLE_OWNER
  , I.UNIQUENESS
  , I.COMPRESSION
  , I.TABLESPACE_NAME
  , I.LOGGING
  , I.PCT_FREE
  , I.INI_TRANS
  , I.MAX_TRANS
  , I.INITIAL_EXTENT
  , I.MIN_EXTENTS
  , I.MAX_EXTENTS
  , NVL(I.PCT_INCREASE,0) AS PCT_INCREASE
  , I.BUFFER_POOL
  , IC.DESCEND
  , IC.COLUMN_NAME
  , IE.COLUMN_EXPRESSION
FROM USER_INDEXES I
INNER JOIN USER_IND_COLUMNS IC 
      ON I.INDEX_NAME     = IC.INDEX_NAME
   AND I.TABLE_NAME = IC.TABLE_NAME
LEFT JOIN USER_IND_EXPRESSIONS IE
      ON 1 = 1
   AND IE.INDEX_NAME      = IC.INDEX_NAME
   AND IE.TABLE_NAME      = IC.TABLE_NAME
   AND IE.COLUMN_POSITION = IC.COLUMN_POSITION
WHERE 1  = 1
   AND IC.INDEX_NAME      = UPPER( #object_name# )
ORDER BY IC.COLUMN_POSITION

</select>

<!-- 
	프로시져의 아규먼트 목록을 리턴한다.
	
 -->
<select id="getProcedureInParamter" resultClass="com.hangum.tadpole.dao.rdb.InOutParameterDAO" parameterClass="java.lang.String">

  SELECT ua.position AS "order"
        ,ua.argument_name AS name
        ,DECODE (ua.data_type, 'REF CURSOR', 'SYS_REFCURSOR', ua.data_type) AS rdbtype
        ,ua.in_out AS type
        ,ua.data_length AS length
        ,ua.default_value as value
    FROM user_arguments ua
   WHERE 1=1
   AND ua.object_name = UPPER (#object_name#)
   AND ua.in_out in ('IN','IN/OUT')
ORDER BY ua.object_name, ua.overload, ua.sequence
  
</select>    

<!-- 
	프로시져의 아규먼트 목록을 리턴한다.
	
 -->
<select id="getProcedureOutParamter" resultClass="com.hangum.tadpole.dao.rdb.InOutParameterDAO" parameterClass="java.lang.String">

  SELECT ua.position AS "order"
        ,ua.argument_name AS name
        ,DECODE (ua.data_type, 'REF CURSOR', 'SYS_REFCURSOR', ua.data_type) AS rdbtype
        ,ua.in_out AS type
        ,ua.data_length AS length
        ,null as value
    FROM user_arguments ua
   WHERE 1=1
   AND ua.object_name = UPPER (#object_name#)
   AND ua.in_out in ('OUT', 'IN/OUT')
ORDER BY ua.object_name, ua.overload, ua.sequence
  
</select>    

</sqlMap>

<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2013 hangum.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      hangum - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<!--
	mysql 5.4.x 버전으로 초기 작업을 시작했습니다.
	이전 버전으로는 테스트 못해봤어요.  - 12.08.07
	
	@author hangum	
 --> 
<sqlMap namespace="MySQL_query">

<!--
	database connection test 
 -->
<select id="connectionCheck" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT TABLE_NAME name	FROM INFORMATION_SCHEMA.TABLES WHERE 1 = 0  
</select>

<!--
	get database version 
 -->
<select id="findDBInfo" resultClass="com.hangum.tadpole.engine.query.dao.DBInfoDAO">
	SELECT version() as productversion, version() as productlevel, version() as edition;
</select>

<!-- 
	table 오직 테이블 이름만.
 -->
<select id="tableListOnlyName" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableDAO" parameterClass="java.lang.String">
	SELECT TABLE_NAME name
	FROM INFORMATION_SCHEMA.TABLES
	WHERE TABLE_SCHEMA = #db# 
		AND TABLE_TYPE = 'BASE TABLE'
	ORDER BY name
</select>

<!-- 
	table 이름
	
	SELECT 
		TABLE_SCHEMA schema_name,
		TABLE_NAME name, 
		TABLE_COMMENT comment
	FROM INFORMATION_SCHEMA.TABLES
	WHERE TABLE_SCHEMA = #db# 
		AND TABLE_TYPE = 'BASE TABLE'
	ORDER BY name
 -->
<select id="tableList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableDAO" parameterClass="java.lang.String">
	SELECT 
		TABLE_NAME name, 
		TABLE_COMMENT comment
	FROM INFORMATION_SCHEMA.TABLES
	WHERE TABLE_SCHEMA = #db# 
		AND TABLE_TYPE = 'BASE TABLE'
	ORDER BY name
</select>

<!-- 
	table 이름
 -->
<select id="table" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableDAO" parameterClass="java.util.Map">
	SELECT TABLE_NAME name, TABLE_COMMENT comment
	FROM INFORMATION_SCHEMA.TABLES
	WHERE TABLE_SCHEMA = #db# 
		AND TABLE_TYPE = 'BASE TABLE'
		AND TABLE_NAME = #name#
	ORDER BY name
</select>

<!-- 
	특정 table의 table이나 view 컬럼 정보
	
	컬럼 설명
	Field			: 컬럼 명
	Type			: 컬럼 타입
	Null			: Null 유무 (예: YES,NO)
	Key				: primary key, foreign key(예: PK, FK)
	Default			: 기본값
	Extra			: 특수컬럼(예: auto_increment)
	Comment
 -->
<select id="tableColumnList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableColumnDAO" parameterClass="java.util.Map">
	SELECT   
         column_name field,
         column_type type,
         is_nullable "null",
         column_key "key",
         column_default "default",
         extra,
         column_comment "comment", 
         collation_name
	FROM information_schema.columns
	WHERE table_schema = #db# AND 
		table_name = #table#
</select>

<!-- 
	테이블간의 관계 목록 정보를 얻습니다.
	erd 그릴때 관계 목록을 보여주기 위한 목적입니다.
	 SELECT constraint_name,table_name, column_name, referenced_table_name, referenced_column_name
 FROM     information_schema.key_column_usage
 WHERE  referenced_table_name IS NOT NULL
 ORDER BY table_name, column_name;
 -->
<select id="referencedTableList"  resultClass="com.hangum.tadpole.engine.query.dao.mysql.ReferencedTableDAO" parameterClass="java.lang.String">
SELECT constraint_name, table_name, column_name, referenced_table_name, referenced_column_name
 FROM     information_schema.key_column_usage
 WHERE  referenced_table_name IS NOT NULL 		and  
 		table_name in ($tables$) 				and 
 		referenced_table_name in ($tables$)
 ORDER BY table_name, column_name;
</select>

<!-- 
	모든 관계 테이블 목록을 가져옵니다.
 -->
<select id="referencedTableListALL"  resultClass="com.hangum.tadpole.engine.query.dao.mysql.ReferencedTableDAO" >
SELECT constraint_name, table_name, column_name, referenced_table_name, referenced_column_name
 FROM     information_schema.key_column_usage
 WHERE  referenced_table_name IS NOT NULL
 ORDER BY table_name, column_name;
</select>
	
<!-- 
	view 정보
 -->
<select id="viewList" resultClass="java.lang.String" parameterClass="java.lang.String">
	SHOW FULL TABLES IN $dbName$ 
	WHERE TABLE_TYPE = 'VIEW'
</select>
	
<!-- 
	index 정보, SHOW INDEX FROM $tableName$
 -->
 <select id="indexList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.InformationSchemaDAO" parameterClass="java.util.Map">
	SELECT * 
	FROM information_schema.statistics 
	WHERE TABLE_SCHEMA = #table_schema#
	  AND TABLE_NAME = #table_name#
	GROUP BY TABLE_NAME, INDEX_NAME
</select>

<!-- 
	index의 디테일 정보
 -->
 <select id="indexDetailList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.InformationSchemaDAO" parameterClass="java.util.Map">
	SELECT * 
	FROM information_schema.statistics 
	WHERE TABLE_SCHEMA = #table_schema# AND
		TABLE_NAME = #table_name# AND
		INDEX_NAME = #index_name#
	GROUP BY TABLE_NAME, INDEX_NAME
</select>
 
<!--
 tableConstraintsList 테이블에 정의된 제약조건 목록을 조회한다.
 
 -->
<select id="tableConstraintsList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TableConstraintsDAO" parameterClass="java.util.Map">
select *
from information_schema.table_constraints
where table_schema = #table_schema#
and table_name = #table_name#
</select>
 
<!-- 
	procedure list
 -->
<select id="procedureList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
	SHOW PROCEDURE STATUS WHERE db = #db_name#
</select>

<!-- 
	function list
 -->
<select id="functionList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
	SHOW FUNCTION STATUS WHERE db = #db_name#
</select>

<!-- 
	show triggers
 -->
<select id="triggerAllList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TriggerDAO" parameterClass="java.lang.String">
	SHOW TRIGGERS 
</select>
<select id="triggerList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.TriggerDAO" parameterClass="java.util.Map">
	SHOW TRIGGERS 
</select>

<!-- 
	SESSION LIST
 -->
<select id="sessionList" resultClass="com.hangum.tadpole.engine.query.dao.mysql.SessionListDAO">
	SHOW PROCESSLIST
</select>

<!-- 
	process kill
 -->
<select id="killProcess" parameterClass="java.lang.String">
	kill #pid#
</select>

<!-- 
	enable 상태의 트리거 목록을 리턴한다.
 -->
<select id="triggerListInTable" resultClass="java.util.HashMap" parameterClass="java.lang.String">
<![CDATA[
	select 
	     event_object_table as "table_name"
	    ,trigger_name as "trigger_name"
	    ,'SET @disable_triggers = 1 ' as "disable_statement" 
	    ,'SET @disable_triggers = 0 ' as "enable_statement" 
	from INFORMATION_SCHEMA.triggers
	where 1=1
	and event_object_table = #table_name#;
]]>
</select>

<!-- 
	table명을 받아서 pk 컬럼 목록을 리턴한다.
 -->
<select id="primarykeyListInTable" resultClass="java.util.HashMap" parameterClass="java.lang.String">
select   
     c.column_name as "column_name"
    ,c.ordinal_position as "column_order"
from information_schema.tables t 
  inner join information_schema.columns c on t.table_schema = c.table_schema and t.table_name = c.table_name
where 1=1
  and c.column_key = 'PRI'
  and t.table_name = #table_name#
order by c.ordinal_position
</select>

<!-- 
	table row count
 -->
<select id="tableRowCount" resultClass="java.lang.Integer" parameterClass="java.lang.String">
	SELECT count(*) FROM $table$
</select>

<!-- 
	table information
 -->
<select id="tableInformation" resultClass="java.util.HashMap" parameterClass="java.lang.String">
	SELECT
    TABLE_NAME, ENGINE, TABLE_ROWS, AUTO_INCREMENT, TABLE_COMMENT, TABLE_COLLATION, CREATE_TIME,
    round(((data_length + index_length) / (1024*1024)),2) as 'SIZEOFMB'
  FROM
    INFORMATION_SCHEMA.TABLES
  WHERE
    TABLE_SCHEMA = #db#
    AND TABLE_TYPE = 'BASE TABLE'
  ORDER BY
    TABLE_NAME
</select>

<!-- 
	RDB Information - Column summary page
 -->
<select id="columnInformation" resultClass="com.hangum.tadpole.engine.query.dao.rdb.RDBInfomationforColumnDAO" parameterClass="java.lang.String">
select   
         t.table_name,
         t.table_comment,
         c.column_name ,
         c.column_type as data_type,
         c.numeric_precision,
         c.numeric_scale,
         c.is_nullable nullable,
         c.column_key pk,
         c.column_default data_default,
         c.extra,
         c.column_comment 
	from information_schema.tables t 
      inner join information_schema.columns c on t.table_schema = c.table_schema and t.table_name = c.table_name
     	where c.table_schema = #db# 
</select>

<!-- 
	Table DDL Script
 -->
<select id="getTableScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
 show create table $object_name$
</select>

<!-- 
	View DDL Script
 -->
<select id="getViewScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
 show create view $object_name$
</select>

<!-- 
	Function DDL Script
 -->
<select id="getFunctionScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
 show create function $object_name$
</select>

<!-- 
	Procedure DDL Script
 -->
<select id="getProcedureScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
 show create procedure $object_name$
</select>


<!-- 
	Trigger DDL Script
 -->
<select id="getTriggerScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
 show create trigger $object_name$
</select>

<select id="getProcedureInParamter" resultClass="com.hangum.tadpole.engine.query.dao.rdb.InOutParameterDAO" parameterClass="java.lang.String">

select 
   p.ordinal_position as "order"
   , p.parameter_name as "name"
   , p.data_type as rdbtype
   , p.parameter_mode as "type"
   , p.numeric_precision as data_length
   , p.dtd_identifier 
   , p.numeric_precision
   , p.numeric_scale
   , '' as value
from information_schema.parameters p
where 1=1
and p.specific_name=#object_name#
and p.parameter_mode in ('IN','INOUT')
order by ordinal_position 
  
</select> 
   
<select id="getProcedureOutParamter" resultClass="com.hangum.tadpole.engine.query.dao.rdb.InOutParameterDAO" parameterClass="java.lang.String">

select 
   p.ordinal_position as "order"
   , p.parameter_name as "name"
   , p.data_type as rdbtype
   , p.parameter_mode as "type"
   , p.numeric_precision as data_length
   , p.dtd_identifier 
   , p.numeric_precision
   , p.numeric_scale
   , '' as value
from information_schema.parameters p
where 1=1
and p.specific_name=#object_name#
and p.parameter_mode in ('OUT','INOUT')
order by ordinal_position 
  
</select>    


</sqlMap>

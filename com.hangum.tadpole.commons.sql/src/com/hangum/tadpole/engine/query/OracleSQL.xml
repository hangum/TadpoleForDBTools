<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2013 hangum.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      hangum - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
    
    
<!-- 
		Tadpole DB Hub - Oracle DB Define		
		Oracle ojdbc6.jar로 작업했으며, 테스트 버전은 10g - 11g까지 입니다. - @hangum
		
		@nilriri
 -->

<sqlMap namespace="Oracle_query">

<!--
	database connection test 
 -->
<select id="connectionCheck" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT sysdate	FROM dual  
</select>

<!-- 
	db의 모든 table 이름
	
	컬럼 설명
	TNAME 		: 테이블 명
 -->
<select id="tableList" resultClass="com.hangum.tadpole.sql.dao.mysql.TableDAO" parameterClass="java.lang.String">
  SELECT 
      T.table_name AS "NAME"
      , S.COMMENTS AS "COMMENT"
    FROM user_tables T 
      LEFT JOIN USER_TAB_COMMENTS S
            ON S.TABLE_NAME = T.TABLE_NAME
ORDER BY T.table_name
</select>

<!-- 
	특정 table의 table이나 view 컬럼 정보
	
	컬럼 설명
	Field			: 컬럼 명
	Type			: 컬럼 타입
	Null			: Null 유무 (예: YES,NO)
	Key				: primary key, foreign key(예: PK, FK)
	Default			: 기본값
	Extra			: 특수컬럼(예: auto_increment)
 -->
<select id="tableColumnList" resultClass="com.hangum.tadpole.sql.dao.mysql.TableColumnDAO" parameterClass="java.util.HashMap">
     SELECT C.COLUMN_NAME AS "FIELD",
        C.DATA_TYPE || CASE WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 AND C.DATA_SCALE > 0 THEN '('||C.DATA_PRECISION || ',' || C.DATA_SCALE||')'
        WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 THEN '('||C.DATA_PRECISION ||')'
        WHEN C.DATA_TYPE = 'DATE' THEN '' ELSE '(' || TO_CHAR(C.DATA_LENGTH) || ')' END AS "TYPE",
        CASE WHEN C.NULLABLE = 'Y' THEN 'YES' ELSE 'NO' END AS "NULL",
       (SELECT CASE P.CONSTRAINT_TYPE WHEN 'P' THEN 'PK'     WHEN 'R' THEN 'FK'                 ELSE '' END
        FROM USER_IND_COLUMNS D 
                LEFT JOIN USER_CONSTRAINTS P ON D.TABLE_NAME = P.TABLE_NAME AND D.INDEX_NAME = P.INDEX_NAME
        WHERE C.TABLE_NAME = D.TABLE_NAME 
            AND C.COLUMN_NAME = D.COLUMN_NAME
            AND  P.CONSTRAINT_TYPE IN ( 'P' , 'R')    ) AS "KEY",
       C.DATA_DEFAULT AS "DEFAULT", '' AS EXTRA, S.COMMENTS AS "COMMENT"
   FROM USER_TAB_COLUMNS C
        LEFT JOIN USER_COL_COMMENTS S ON S.TABLE_NAME = C.TABLE_NAME AND S.COLUMN_NAME = C.COLUMN_NAME 
    WHERE C.TABLE_NAME = #table# 
    ORDER BY C.COLUMN_ID
</select>

<!-- 
	erd에서 테이블간의 관계를 표시하기 위한 정보
	
	컬럼 설명
	constraint_name		:	 인덱스 이름
	table_name			:	 소스 테이블 이름
	column_name			:	 소스 테이블 컬럼
	
	referenced_table_name	:	타켓 테이블 이름
	referenced_column_name	: 	타켓 테이블 컬럼
 -->
<select id="referencedTableList"  resultClass="com.hangum.tadpole.sql.dao.mysql.ReferencedTableDAO" parameterClass="java.lang.String">
 SELECT t.constraint_name ,
        t.table_name,
       max(decode(rno,1,t.column_name)) ||','|| max(decode(rno,2,t.column_name)) AS column_name ,
                                                max(r.table_name) AS referenced_table_name ,
                                                max(r.columns) AS referenced_column_name
FROM
  ( SELECT C.table_name ,
           C.CONSTRAINT_NAME ,
           S.column_name ,
           C.R_CONSTRAINT_NAME ,
           COUNT(*)OVER(PARTITION BY C.CONSTRAINT_NAME) CNT ,
                                                        ROW_NUMBER()OVER(PARTITION BY C.CONSTRAINT_NAME
                                                                         ORDER BY S.COLUMN_NAME) RNO
   FROM user_constraints C
   LEFT JOIN USER_CONS_COLUMNS S ON C.CONSTRAINT_NAME = S.CONSTRAINT_NAME
   AND C.TABLE_NAME = S.TABLE_NAME
   WHERE C.CONSTRAINT_TYPE = 'R' ) t
LEFT JOIN
  (SELECT x.table_name,
          x.constraint_name ,
          max(decode(x.rno,1,COLUMN_NAME))||',' || max(decode(x.rno,2,COLUMN_NAME)) columns
   FROM
     (SELECT s.table_name ,
             s.constraint_name ,
             s.COLUMN_NAME , ROW_NUMBER()OVER(PARTITION BY s.CONSTRAINT_NAME
                                              ORDER BY S.COLUMN_NAME) RNO
      FROM USER_CONS_COLUMNS S)x
   GROUP BY x.table_name,
            x.constraint_name ) R ON t.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME
WHERE t.table_name in ( $table$ )            
GROUP BY t.table_name,
         t.constraint_name
</select>

<!-- 
	모든 관계 테이블 목록을 가져옵니다.
	(referencedTableList와 쿼리는 같음, 틀린 점은 모든 테이블의 관계를 가져 옵니다. erd에서 모든 테이블 관계 보여주는 기능 사용 용도)
	
	컬럼 설명
	constraint_name		:	 인덱스 이름
	table_name			:	 소스 테이블 이름
	column_name			:	 소스 테이블 컬럼
	
	referenced_table_name	:	타켓 테이블 이름
	referenced_column_name	: 	타켓 테이블 컬럼
 -->
<select id="referencedTableListALL"  resultClass="com.hangum.tadpole.sql.dao.mysql.ReferencedTableDAO" >
 SELECT t.table_name,
       t.constraint_name ,
       max(decode(rno,1,t.column_name)) ||','|| max(decode(rno,2,t.column_name)) AS column_name ,
                                                max(r.table_name) AS referenced_table_name ,
                                                max(r.columns) AS referenced_column_name
FROM
  ( SELECT C.table_name ,
           C.CONSTRAINT_NAME ,
           S.column_name ,
           C.R_CONSTRAINT_NAME ,
           COUNT(*)OVER(PARTITION BY C.CONSTRAINT_NAME) CNT ,
                                                        ROW_NUMBER()OVER(PARTITION BY C.CONSTRAINT_NAME
                                                                         ORDER BY S.COLUMN_NAME) RNO
   FROM user_constraints C
   LEFT JOIN USER_CONS_COLUMNS S ON C.CONSTRAINT_NAME = S.CONSTRAINT_NAME
   AND C.TABLE_NAME = S.TABLE_NAME
   WHERE C.CONSTRAINT_TYPE = 'R' ) t
LEFT JOIN
  (SELECT x.table_name,
          x.constraint_name ,
          max(decode(x.rno,1,COLUMN_NAME))||',' || max(decode(x.rno,2,COLUMN_NAME)) columns
   FROM
     (SELECT s.table_name ,
             s.constraint_name ,
             s.COLUMN_NAME , ROW_NUMBER()OVER(PARTITION BY s.CONSTRAINT_NAME
                                              ORDER BY S.COLUMN_NAME) RNO
      FROM USER_CONS_COLUMNS S)x
   GROUP BY x.table_name,
            x.constraint_name ) R ON t.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME
GROUP BY t.table_name,
         t.constraint_name
</select>
	
<!-- 
	db의 view 정보
	
	컬럼 설명
	oebjt_name		: view 이름
 -->
<select id="viewList" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT o.object_name AS "View Name"
    FROM user_objects o
   WHERE o.object_type = 'VIEW'
ORDER BY 1	
</select>

<!-- 
	db의 SYNONYM 정보
	
	컬럼 설명
	oebjt_name		: view 이름
 -->
<select id="synonymList" resultClass="com.hangum.tadpole.sql.dao.rdb.OracleSynonymDAO">
	SELECT s.synonym_name
	      ,s.table_owner
	      ,s.table_name
	      ,s.db_link
	      ,c.comments
	      ,o.object_type
	  FROM user_synonyms s
	       LEFT JOIN all_tab_comments c
	          ON s.table_owner = c.owner AND s.table_name = c.table_name
	       INNER JOIN all_objects o
	          ON o.owner = s.table_owner AND o.object_name = s.table_name
	  WHERE 1=1
	    AND o.object_type IN ('TABLE', 'VIEW', 'PACKAGE', 'PROCEDURE', 'FUNCTION')
</select>
	
<!-- 
	Synonym세부정보.
 -->
<select id="synonymColumnList" resultClass="com.hangum.tadpole.sql.dao.rdb.OracleSynonymColumnDAO" parameterClass="java.util.HashMap">
    SELECT 
        C.COLUMN_ID,
        C.OWNER AS TABLE_OWNER,
        C.TABLE_NAME,
        C.COLUMN_NAME,
        C.DATA_TYPE || 
        CASE WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 AND C.DATA_SCALE > 0 THEN '('||C.DATA_PRECISION || ',' || C.DATA_SCALE||')'
        	 WHEN C.DATA_TYPE = 'NUMBER' AND C.DATA_PRECISION > 0 THEN '('||C.DATA_PRECISION ||')'
             WHEN C.DATA_TYPE = 'DATE' THEN '' ELSE '(' || TO_CHAR(C.DATA_LENGTH) || ')' END AS "DATA_TYPE",
        CASE WHEN C.NULLABLE = 'Y' THEN 'YES' ELSE 'NO' END AS "NULLABLE",
       (SELECT CASE P.CONSTRAINT_TYPE WHEN 'P' THEN 'PK'     WHEN 'R' THEN 'FK'                 ELSE '' END
        FROM ALL_IND_COLUMNS D 
            LEFT JOIN ALL_CONSTRAINTS P ON D.INDEX_OWNER = NVL(P.INDEX_OWNER, P.OWNER) AND D.TABLE_NAME = P.TABLE_NAME AND D.INDEX_NAME = P.INDEX_NAME
        WHERE 1=1
          AND D.INDEX_OWNER = C.OWNER
          AND C.TABLE_NAME = D.TABLE_NAME 
          AND C.COLUMN_NAME = D.COLUMN_NAME
          AND  P.CONSTRAINT_TYPE IN ( 'P' , 'R')    ) AS "KEY",
       C.DATA_DEFAULT AS "DEFAULT_VALUE",
       '' AS EXTRA, 
       S.COMMENTS AS "COMMENTS"
   FROM ALL_TAB_COLUMNS C
        LEFT JOIN ALL_COL_COMMENTS S ON S.OWNER = C.OWNER AND S.TABLE_NAME = C.TABLE_NAME AND S.COLUMN_NAME = C.COLUMN_NAME 
    WHERE C.OWNER = #owner#
       AND C.TABLE_NAME = #table# 
   	UNION ALL
	SELECT SEQUENCE
	        ,OWNER
	        ,OBJECT_NAME
	        ,ARGUMENT_NAME
	        ,DECODE (DATA_TYPE, 'REF CURSOR', 'SYS_REFCURSOR', DATA_TYPE) DATA_TYPE
	        ,NULL
	        ,IN_OUT
	        ,DEFAULT_VALUE
	        ,NULL
	        ,PACKAGE_NAME
	    FROM ALL_ARGUMENTS
	   WHERE OBJECT_ID = (SELECT OBJECT_ID
	                        FROM SYS.USER_OBJECTS
	                       WHERE 1=1
	                       AND OWNER = #owner#
	                       AND OBJECT_NAME = #table# 
	                       AND OBJECT_TYPE IN ('PROCEDURE', 'FUNCTION'))
  UNION ALL
  SELECT ROWNUM
        ,s.owner
        ,s.object_name
        ,s.procedure_name
        , (SELECT CASE
                     WHEN INSTR (UPPER (REPLACE (text, CHR (9), ' ')), ' FUNCTION ') &gt; 0
                     THEN
                        'FUNCTION'
                     WHEN INSTR (UPPER (REPLACE (text, CHR (9), ' ')), ' PROCEDURE ') &gt; 0
                     THEN
                        'PROCEDURE'
                     ELSE
                        'unknow'
                  END
             FROM user_source
            WHERE 1 = 1 AND name = s.object_name AND UPPER (REPLACE (text, CHR (9), ' ')) LIKE '% ' || s.procedure_name || '%' AND ROWNUM &lt;= 1)
        ,NULL
        ,NULL
        ,NULL
        ,NULL
        ,NULL
    FROM all_procedures s
   WHERE 1 = 1 
   AND s.owner = UPPER (#owner#) 
   AND s.object_name = UPPER (#table#)
   ORDER BY 1
</select>

<!-- 
	index 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	table_name			:  	테이블 명
    index_name			:	인덱스 명
    column_name			:	컬럼 명
    column_position		: 
    column_length		:
    char_length			:
    descend				:	
    uniqueness			:
    table_owner			:
    constraint_type		:
    status				:
    #table_schema# AS table_schema
 -->
 <select id="indexList" resultClass="com.hangum.tadpole.sql.dao.mysql.InformationSchemaDAO" parameterClass="java.lang.String">
  SELECT i.table_name
        ,i.index_name
        ,i.uniqueness
        ,i.table_owner
        ,i.compression
        ,i.tablespace_name
        ,i.logging
        ,i.pct_free
        ,i.ini_trans
        ,i.max_trans
        ,i.initial_extent
        ,i.min_extents
        ,i.max_extents
        ,i.pct_increase
        ,i.buffer_pool
        ,CASE
            WHEN c.constraint_type = 'P' THEN 'PK'
            WHEN i.uniqueness = 'UNIQUE' THEN 'UQ'
            ELSE ''
         END
            AS index_type
        ,c.status
        ,#table_schema# AS table_schema
    FROM    user_indexes i
         LEFT JOIN
            user_constraints c
         ON     i.table_name = c.table_name
            AND i.index_name = c.constraint_name
            AND c.status = 'ENABLED'
ORDER BY i.table_name, i.index_name
</select>

 <select id="indexDetailList" resultClass="com.hangum.tadpole.sql.dao.mysql.InformationSchemaDAO" parameterClass="java.util.Map">
  SELECT m.table_name,
         m.index_name,
         m.column_name,
         m.column_position as seq_in_index,
         m.column_length,
         m.char_length,
         m.descend as "comment",
         i.uniqueness,
         i.table_owner,
         i.table_owner AS table_schema
    FROM user_ind_columns m
         LEFT JOIN user_indexes i
            ON m.table_name = i.table_name AND m.index_name = i.index_name
   WHERE 1=1
     AND m.index_name = UPPER(#index_name#)
ORDER BY m.column_position        
</select>

<!-- 
	procedure 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="procedureList" resultClass="com.hangum.tadpole.sql.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
        , s.status
FROM    user_objects s
WHERE   s.object_type = 'PROCEDURE'
ORDER BY s.object_type DESC, s.object_name 
</select>

<!-- 
	Oracle Pakage & PackageBody 내역	
-->

<select id="packageList" resultClass="com.hangum.tadpole.sql.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
	SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
        , (CASE WHEN 'VALID' = NVL (b.status, 'VALID') AND 'VALID' = s.status THEN 'VALID' ELSE 'INVALID' END) AS status
    FROM user_objects s LEFT JOIN user_objects b ON s.object_name = b.object_name AND b.object_type = 'PACKAGE BODY'
	WHERE   s.object_type = 'PACKAGE'
	ORDER BY s.object_type DESC, s.object_name 
</select>

<!-- 
	package arguments list
	SELECT 
	       OBJECT_NAME, POSITION, DECODE(DATA_TYPE, 'REF CURSOR', 'SYS_REFCURSOR', DATA_TYPE) DATA_TYPE, OVERLOAD, ARGUMENT_NAME,
	       DATA_LEVEL, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, TYPE_NAME,
	       IN_OUT, OBJECT_ID, SEQUENCE
	FROM   ALL_ARGUMENTS
	WHERE  OBJECT_ID = (SELECT OBJECT_ID
	         FROM SYS.USER_OBJECTS 
	         WHERE OBJECT_NAME ='PKG_UTIL'
	         AND OBJECT_TYPE IN ('PACKAGE', 'PROCEDURE', 'FUNCTION'))
	ORDER BY OBJECT_NAME, OVERLOAD, SEQUENCE

 -->
<select id="packageBodyList" resultClass="com.hangum.tadpole.sql.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
select 
	s.object_name as packagename
	,s.procedure_name as name
	,(
		select case 
		when instr(upper(replace(text,chr(9),' ')), ' FUNCTION ') > 0 then 'FUNCTION'
		         when  instr(upper(replace(text,chr(9),' ')), ' PROCEDURE ') > 0 then 'PROCEDURE'
		         else 'unknow' end
		  from user_source
		where 1=1
		and  name = s.object_name
		and  upper(replace(text,chr(9),' ')) like '% '|| s.procedure_name ||'%'
		and rownum &lt;= 1
	) as type
 from user_procedures s
 where 1=1
  and s.object_name = upper(#package#)
 order by 3, 2
</select>

<!-- 
	function 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="functionList" resultClass="com.hangum.tadpole.sql.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
SELECT  
          s.object_name AS name
        , s.object_type AS TYPE
        , #db_name#   AS db
        , s.created
        , s.status
FROM    user_objects s
WHERE   s.object_type = 'FUNCTION'
ORDER BY s.object_name 
</select>

<!-- 
	show 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	trigger			: trigger name	
	event			: event
	table			: table name
	statement		:
	timing			:
	created			:
	sql_mode		:
	definer			:
	character_set_client	:	
	collation_connection	:
	database				:
	collation				:
 -->
<select id="triggerList" resultClass="com.hangum.tadpole.sql.dao.mysql.TriggerDAO" parameterClass="java.lang.String">
  SELECT s.object_name AS name
        ,t.table_name AS table_name
        ,t.triggering_event AS event
        ,t.when_clause AS timing
        ,s.object_type AS TYPE
        ,#db_name# AS db
        ,s.created
        , (CASE WHEN t.status = 'ENABLED' AND s.status = 'VALID' THEN 'VALID' ELSE 'INVALID' END) AS status
    FROM user_objects s INNER JOIN user_triggers t ON S.OBJECT_NAME = t.trigger_name
   WHERE s.object_type = 'TRIGGER'
ORDER BY t.table_name, s.object_name
</select>

<!-- 
	show function, object
	
	컬럼 설명
	object_name		: object 이름
	object_id   	: object id
	create			: 생성일시
	text			: function text
 -->
<select id="functionSource" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT O.OBJECT_NAME ,
		O.OBJECT_ID ,
		O.CREATED ,
		S.TEXT
	FROM user_OBJECTS O
		LEFT JOIN USER_SOURCE S
		ON O.OBJECT_NAME = S.NAME
	WHERE 1 =1
		O.OBJECT_NAME = #object_name#
	ORDER BY O.OBJECT_NAME, S.LINE
</select>

<!-- 
	지정한 컬럼에 정의된 제약조건 목록을 조회한다.
	
 -->
<select id="constraintList" resultClass="com.hangum.tadpole.sql.dao.mysql.ConstraintDAO" parameterClass="java.util.HashMap">
  SELECT SUBSTR ( a.column_name, 1, 15 ) column_name 
       , b.constraint_type constraint_type 
       , DECODE ( b.constraint_type, 'P', 'PRIMARY KEY', 'U', 'UNIQUE KEY', 'C', 'CHECK OR NOT NULL', 'R', 'FOREIGN KEY' ) constraint_type_nm 
       , a.constraint_name constraint_name 
       , b.search_condition 
       , b.status 
       , r.table_name AS ref_table 
    FROM USER_CONS_COLUMNS a 
         INNER JOIN USER_CONSTRAINTS b 
            ON a.table_name = b.table_name 
           AND a.constraint_name = b.constraint_name 
         LEFT JOIN USER_CONSTRAINTS r 
            ON b.r_CONSTRAINT_NAME = R.CONSTRAINT_NAME 
   WHERE 1=1 
   AND a.table_name = UPPER ( #table# ) 
   AND a.column_name = UPPER ( #column# ) 
ORDER BY 1, 2 
</select>

<!-- 
	SESSION LIST
 -->
<select id="getSessionGrant" resultClass="java.lang.Integer">
select sum(case when privilege = 'ALTER SYSTEM' then 1 else 0 end) from Session_privs where 1=1
</select>

<select id="getSessionView" resultClass="java.lang.Integer">
<![CDATA[
SELECT count(*) FROM v$$session WHERE 1 = 1
]]>
</select>

<select id="getVersion" resultClass="java.lang.Integer">
<![CDATA[
SELECT TO_NUMBER(SUBSTR (version, 1, INSTR (version, '.') - 1)) AS version
  FROM (SELECT TRIM (SUBSTR (banner, INSTR (banner, CHR (9)) + 1, 10)) AS version
          FROM v$$version
         WHERE banner LIKE 'CORE%')
]]>
</select>

<select id="sessionList_9" resultClass="com.hangum.tadpole.sql.dao.mysql.SessionListDAO">
<![CDATA[
  SELECT s.sid || ',' || s.serial## AS id
        ,s.username AS "USER"
        ,s.osuser || ' of ' || s.machine AS HOST
        ,s.schemaname AS db
        ,SUBSTR (q.sql_text, 1, 30) || '...' AS command
        ,s.logon_time AS time
        ,s.status AS state
        ,s.module || ' - ' || s.status || ' : ' || CHR (9) || CHR (13) || CHR (13) || q.sql_text AS info
    FROM v$$session s
         LEFT JOIN v$$process p
            ON p.addr = s.paddr
         LEFT JOIN v$$sql q
            ON q.address IN DECODE (s.sql_address, NULL, s.prev_sql_addr, s.sql_address)
   WHERE 1 = 1 AND s.username IS NOT NULL AND NVL (s.osuser, 'x') <> 'SYSTEM' AND s.TYPE <> 'BACKGROUND'
ORDER BY s.module, s.username
]]>
</select> 

<select id="sessionList" resultClass="com.hangum.tadpole.sql.dao.mysql.SessionListDAO">
<![CDATA[
	  SELECT S.SID || ',' || S.SERIAL## AS ID
	        ,s.USERNAME AS "USER"
	        ,S.OSUSER || ' of ' || s.MACHINE AS HOST
	        ,S.SCHEMANAME AS DB
	        ,SUBSTR (Q.SQL_TEXT, 1, 30) || '...' AS COMMAND
	        ,S.LOGON_TIME AS TIME
	        ,S.STATE AS STATE
	        ,S.MODULE || ' - ' || S.STATUS ||' : '||CHR(9)||CHR(13)||CHR(13)||  Q.SQL_FULLTEXT AS INFO
	    FROM V$$SESSION s
	         LEFT JOIN v$$PROCESS P
	            ON P.ADDR = S.PADDR
	         LEFT JOIN V$$SQL Q
	            ON Q.SQL_ID IN DECODE(S.SQL_ID, NULL, S.PREV_SQL_ID, S.SQL_ID) 
	   WHERE 1=1
	   AND s.USERNAME IS NOT NULL 
	   AND NVL(s.osuser, 'x') <> 'SYSTEM' 
	   AND s.TYPE <> 'BACKGROUND'
	ORDER BY S.MODULE, S.USERNAME
]]>
</select>

<!-- 
	ALTER SYSTEM DISCONNECT SESSION '123,9' POST_TRANSACTION IMMEDIATE

 -->
<select id="killProcess" parameterClass="java.lang.String">
	ALTER SYSTEM KILL SESSION '$spid$' IMMEDIATE
</select>


<!-- 
	table information
 -->
<select id="tableInformation" resultClass="java.util.HashMap" parameterClass="java.lang.String">
	select table_name, num_rows, table_lock
	from user_tables
</select>

<!-- 
	column information
 -->
<select id="columnInformation" resultClass="com.hangum.tadpole.sql.dao.rdb.RDBInfomationforColumnDAO" parameterClass="java.lang.String">
select cols.table_name as table_name
           , tbls.comments as table_comment
            ,cols.column_name as column_name
            ,cols.nullable as nullable
            ,cols.data_type || 
            (case when cols.data_type =  'NUMBER' then '('|| cols.data_precision ||','|| cols.data_scale ||')'
            when cols.data_type = 'DATA' then null 
            when cols.data_type in ( 'CHAR', 'VARCHAR', 'VARCHAR2'  ,'NCHAR'  ,'NVARCHAR' ,'NVARCHAR2'  ) then '(' || to_char(cols.char_length) || ')'
            else  '(' || to_char(cols.data_length) ||')' 
            end  ) as data_type
            ,cols.data_default as data_default
            ,coms.comments as column_comment
            ,cols.data_type_mod as data_type_mod
            ,cols.char_used as char_used
            ,decode (cols.density, null, 'No', 'Yes') as histogram
            ,cols.num_distinct as num_distinct
            ,cols.num_nulls as num_nulls
            ,round (cols.density, 5) as density
            ,cols.last_analyzed as last_analyzed
        from sys.user_tab_cols cols
            left join sys.user_col_comments coms on coms.table_name = cols.table_name and coms.column_name = cols.column_name 
            left join sys.user_tab_comments tbls on tbls.table_name = cols.table_name
       where 1 = 1 and cols.hidden_column = 'NO'
    order by cols.table_name, cols.column_id
</select>

<!-- 
	Table DDL Script
 -->
<select id="getTableScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">


SELECT C.TABLE_NAME
     , C.COLUMN_NAME
     , C.DATA_TYPE
     , C.DATA_TYPE_MOD
     , C.DATA_TYPE_OWNER
     , DECODE(C.DATA_TYPE, 'CHAR', C.CHAR_LENGTH,
                         'VARCHAR', C.CHAR_LENGTH,
                         'VARCHAR2', C.CHAR_LENGTH,
                         'NCHAR', C.CHAR_LENGTH,
                         'NVARCHAR', C.CHAR_LENGTH,
                         'NVARCHAR2', C.CHAR_LENGTH,
                         C.DATA_LENGTH) DATA_LENGTH
      , C.DATA_PRECISION
      , C.DATA_SCALE
      , C.NULLABLE
      , C.CHAR_USED
      , USER OWNER
      , C.DATA_DEFAULT
FROM SYS.USER_TAB_COLUMNS C
WHERE 1=1
AND C.TABLE_NAME = UPPER(#table_name#)
ORDER BY C.TABLE_NAME, C.COLUMN_ID


</select>

<!-- 
	Table DDL Script => Primary key list
 -->
 
<select id="getTableScript.pk" resultClass="java.util.HashMap" parameterClass="java.lang.String">
  SELECT C.CONSTRAINT_NAME, CC.COLUMN_NAME
    FROM SYS.DBA_CONS_COLUMNS CC, SYS.DBA_CONSTRAINTS C
   WHERE     C.OWNER = CC.OWNER
         AND C.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
         AND C.TABLE_NAME = CC.TABLE_NAME
         AND C.OWNER = USER
         AND C.TABLE_NAME = UPPER(#table_name#)
         AND C.CONSTRAINT_TYPE = 'P'
ORDER BY CC.POSITION

</select>

<!-- 
	Table DDL Script => Table, Column Comment Script
 -->
 
<select id="getTableScript.comments" resultClass="java.lang.String" parameterClass="java.lang.String">

SELECT    'COMMENT ON TABLE '
       || C.OWNER
       || '.'
       || C.TABLE_NAME
       || ' IS '''
       || C.COMMENTS
       || ''';'
          AS COMMENT_TEXT
  FROM SYS.DBA_TAB_COMMENTS C
 WHERE     C.OWNER = USER
       AND C.COMMENTS IS NOT NULL
       AND C.TABLE_NAME = UPPER(#table_name#)
UNION ALL
SELECT    'COMMENT ON COLUMN '
       || C.OWNER
       || '.'
       || C.TABLE_NAME
       || '.'
       || C.COLUMN_NAME
       || ' IS '''
       || C.COMMENTS
       || ''';'
  FROM SYS.DBA_COL_COMMENTS C
 WHERE     C.OWNER = USER
       AND C.COMMENTS IS NOT NULL
       AND C.TABLE_NAME = UPPER(#table_name#)
  
</select>

<!-- 
	Table DDL Script => View Header
 -->
 
<select id="getViewScript.head" resultClass="java.lang.String" parameterClass="java.lang.String">


  SELECT CASE
            WHEN COLUMN_ID = 1
            THEN
               'CREATE OR REPLACE VIEW ' || TABLE_NAME || ' ( ' || COLUMN_NAME
            WHEN COLUMN_ID &gt;= 1 AND COLUMN_ID &lt; COUNT (COLUMN_ID) OVER ()
            THEN
               ', ' || COLUMN_NAME
            ELSE
               ', ' || COLUMN_NAME || ' ) AS '
         END AS SOURCE_TEXT
    FROM SYS.USER_TAB_COLUMNS C
   WHERE 1 = 1 
   AND TABLE_NAME = UPPER(#view_name#)
ORDER BY TABLE_NAME, COLUMN_ID

</select>

<!-- 
	Table DDL Script => View body 
 -->
 
<select id="getViewScript.body" resultClass="java.lang.String" parameterClass="java.lang.String">
  SELECT V.TEXT AS SOURCE_TEXT
    FROM SYS.USER_VIEWS V
   WHERE 1 = 1 
     AND V.VIEW_NAME = UPPER(#view_name#)
ORDER BY VIEW_NAME

</select>

<!-- 
	Procedure Script 
 -->
 
<select id="getProcedureScript" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT
    b.text AS source_text
  FROM user_objects a 
      INNER JOIN user_source b ON a.object_name = b.name
WHERE 1 = 1
  AND a.object_name = UPPER(#object_name#)
  AND a.object_type = 'PROCEDURE'
ORDER BY b.line
</select>

<!-- 
	Trigger Script 
 -->
 
<select id="getTriggerScript" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'TRIGGER'
ORDER BY B.LINE

</select>

<!-- 
	Trigger Script 
 -->
 
<select id="getFunctionScript" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'FUNCTION'
ORDER BY B.LINE

</select>


<!-- 
	DDL Script object type 
 -->
<!-- 현재는 프로시져탭에서 프로시져와 패키지를 함께 다루고 있으므로 오브젝트 타입을 먼저 체크하기 위한 SQL --> 
<select id="getSourceObjectType" resultClass="java.lang.String" parameterClass="java.lang.String">
  SELECT B.object_type as TYPE 
    FROM user_objects B
   WHERE 1 = 1 
      AND B.object_name = UPPER (#object_name#)
      AND ROWNUM &lt;= 1
</select>

<!-- 
	Package Header Script 
 -->
 
<select id="getPackageScript.head" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'PACKAGE'
ORDER BY B.LINE

</select>

<!-- 
	Package Body Script 
 -->
 
<select id="getPackageScript.body" resultClass="java.lang.String" parameterClass="java.lang.String">

  SELECT B.TEXT AS SOURCE_TEXT
    FROM user_objects A INNER JOIN USER_SOURCE B ON A.object_name = B.NAME AND a.object_type = b.type
   WHERE     1 = 1
         AND A.object_name = UPPER (#object_name#)
         AND B.TYPE = 'PACKAGE BODY'
ORDER BY B.LINE

</select>

    
<!-- 
	Index Script 
 -->
 
<select id="getIndexScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">

SELECT 
    IC.COLUMN_POSITION
  , I.INDEX_NAME
  , I.TABLE_NAME
  , I.INDEX_TYPE
  , I.TABLE_OWNER
  , I.UNIQUENESS
  , I.COMPRESSION
  , I.TABLESPACE_NAME
  , I.LOGGING
  , I.PCT_FREE
  , I.INI_TRANS
  , I.MAX_TRANS
  , I.INITIAL_EXTENT
  , I.MIN_EXTENTS
  , I.MAX_EXTENTS
  , NVL(I.PCT_INCREASE,0) AS PCT_INCREASE
  , I.BUFFER_POOL
  , IC.DESCEND
  , IC.COLUMN_NAME
  , IE.COLUMN_EXPRESSION
FROM USER_INDEXES I
INNER JOIN USER_IND_COLUMNS IC 
      ON I.INDEX_NAME     = IC.INDEX_NAME
   AND I.TABLE_NAME = IC.TABLE_NAME
LEFT JOIN USER_IND_EXPRESSIONS IE
      ON 1 = 1
   AND IE.INDEX_NAME      = IC.INDEX_NAME
   AND IE.TABLE_NAME      = IC.TABLE_NAME
   AND IE.COLUMN_POSITION = IC.COLUMN_POSITION
WHERE 1  = 1
   AND IC.INDEX_NAME      = UPPER( #object_name# )
ORDER BY IC.COLUMN_POSITION

</select>

<!-- 
	프로시져의 아규먼트 목록을 리턴한다.
	
 -->
<select id="getProcedureInParamter" resultClass="com.hangum.tadpole.sql.dao.rdb.InOutParameterDAO" parameterClass="java.util.HashMap">

  SELECT ua.position AS "order"
        ,ua.argument_name AS name
        ,DECODE (ua.data_type, 'REF CURSOR', 'SYS_REFCURSOR', ua.data_type) AS rdbtype
        ,ua.in_out AS type
        ,ua.data_length AS length
        ,ua.default_value as value
    FROM user_arguments ua
   WHERE 1=1
   AND ua.object_name = UPPER (#object_name#)
   AND ua.in_out in ('IN','IN/OUT')
   AND ua.argument_name > ' '
   and nvl(ua.package_name,'null') = case when #package_name# is null then 'null' else UPPER (#package_name#) end
ORDER BY ua.object_name, ua.overload, ua.sequence
  
</select>    

<!-- 
	프로시져의 아규먼트 목록을 리턴한다.
	
 -->
<select id="getProcedureOutParamter" resultClass="com.hangum.tadpole.sql.dao.rdb.InOutParameterDAO" parameterClass="java.util.HashMap">

  SELECT ua.position AS "order"
        ,ua.argument_name AS name
        ,DECODE (ua.data_type, 'REF CURSOR', 'SYS_REFCURSOR', ua.data_type) AS rdbtype
        ,ua.in_out AS type
        ,ua.data_length AS length
        ,null as value
    FROM user_arguments ua
   WHERE 1=1
   AND ua.object_name = UPPER (#object_name#)
   AND ua.in_out in ('OUT', 'IN/OUT')
   AND ua.argument_name > ' '
   and nvl(ua.package_name,'null') = case when #package_name# is null then 'null' else UPPER (#package_name#) end
ORDER BY ua.object_name, ua.overload, ua.sequence
  
</select>    

</sqlMap>

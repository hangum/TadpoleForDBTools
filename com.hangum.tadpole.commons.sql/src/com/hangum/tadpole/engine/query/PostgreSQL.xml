<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2013 hangum.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      hangum - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<!-- 
	PostgreSQL 9.1 버전으로 초기 작업을 시작했습니다.
	이전 버전으로는 테스트 못해봤어요.  - 12.08.07
	
	@author hangum	
 -->
<sqlMap namespace="POSTGRESQL_query">

<!--
	database connection test 
 -->
<select id="connectionCheck" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT a.table_name "name" FROM information_schema.tables a where 1 = 0 
</select>

<!-- 
	table 이름
	테이블 코멘트 부분 처리를 못해서... 
	AND relname ~ '^(emp)$' 부분에 AND relname ~ '^(a.table_name)$' 가 들어가야 합니다. 
	
	SELECT a.table_name "name", 
	(
		SELECT 
		  pg_catalog.obj_description(oid, 'pg_class') 
		FROM pg_catalog.pg_class
		WHERE relkind IN ('r','')
		  AND relname ~ '^(emp)$'
		  AND pg_catalog.pg_table_is_visible(oid)
  	) as "comment"
	FROM information_schema.tables a
	where a.table_schema = 'public' and 
		a.table_type = 'BASE TABLE'
	ORDER BY name 
	
 -->
<select id="tableList" resultClass="com.hangum.tadpole.sql.dao.mysql.TableDAO" parameterClass="java.lang.String">
SELECT
    relname as "name"
    ,pg_catalog.obj_description(oid,'pg_class') as "comment"
  FROM pg_catalog.pg_class ‌
  WHERE 1 = 1 
    AND relkind IN ('r','')
    AND relname IN (
      SELECT a.table_name
        FROM information_schema.tables a
        WHERE a.table_schema = 'public' 
          AND a.table_type = 'BASE TABLE' )
  ORDER BY name
</select>

<!-- 
	특정 table의 table이나 view 컬럼 정보
	
	컬럼 설명
	Field			: 컬럼 명
	Type			: 컬럼 타입
	Null			: Null 유무 (예: YES,NO)
	Key				: primary key, foreign key(예: PK, FK)
	Default			: 기본값
	Extra			: 특수컬럼(예: auto_increment)

	PostgreSQL System function
	col_description(table_oid, column_number)	text	get comment for a table column
	obj_description(object_oid, catalog_name)	text	get comment for a database object
	
 -->
<select id="tableColumnList" resultClass="com.hangum.tadpole.sql.dao.mysql.TableColumnDAO" parameterClass="java.util.HashMap">
	SELECT a.column_name AS "FIELD",
       a.data_type  "TYPE",
       a.is_nullable AS "NULL",
       a.column_default as "Default"  ,
       (SELECT
  			tc.constraint_type 
			FROM 
   				 information_schema.table_constraints AS tc 
  				  JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
			WHERE tc.table_name = #table# 
			AND kcu.column_name = a.column_name) as "key",
		(
		SELECT 
		    pg_catalog.col_description(attrelid, attnum)
		FROM 
		    pg_catalog.pg_attribute
		WHERE 
		    attrelid = (select oid from pg_catalog.pg_class where relname = #table#) AND 
		    attname= a.column_name AND 
		    attnum > 0 AND 
		    NOT attisdropped
		)	as "comment"			
    FROM information_schema.columns a
    WHERE a.table_name = #table#
	ORDER BY a.ordinal_position
</select>

<!-- 
	테이블간의 관계 목록 정보를 얻습니다.
	erd 그릴때 관계 목록을 보여주기 위한 목적입니다.
 -->
<select id="referencedTableList"  resultClass="com.hangum.tadpole.sql.dao.mysql.ReferencedTableDAO" parameterClass="java.lang.String">
 SELECT
    tc.constraint_name, 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_name AS referenced_table_name,
    ccu.column_name AS referenced_column_name 
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
    JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
WHERE tc.table_name in ($tables$)
</select>

<!-- 
	모든 관계 테이블 목록을 가져옵니다.
 -->
<select id="referencedTableListALL"  resultClass="com.hangum.tadpole.sql.dao.mysql.ReferencedTableDAO" >
SELECT
    tc.constraint_name, 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_name AS referenced_table_name,
    ccu.column_name AS referenced_column_name 
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
    JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
</select>
	
<!-- 
	db의 view 정보
	
	컬럼 설명
	oebjt_name		: view 이름
 -->
<select id="viewList" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT table_name 
	FROM information_schema.tables 
	where table_schema = 'public' and 
		table_type = 'VIEW'
	ORDER BY table_name
</select>
	
<!-- 
	index 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	table_name			:  	테이블 명
    index_name			:	인덱스 명
    column_name			:	컬럼 명
    column_position		: 
    column_length		:
    char_length			:
    descend				:	
    uniqueness			:
    table_owner			:
    constraint_type		:
    status				:
    #table_schema# AS table_schema
 -->
 <select id="indexList" resultClass="com.hangum.tadpole.sql.dao.mysql.InformationSchemaDAO" parameterClass="java.lang.String">
	select
	     t.relname  as "table_name",
	     c.relname  as "index_name"
	from
	          pg_catalog.pg_class c
	     join pg_catalog.pg_namespace n on n.oid        = c.relnamespace
	     join pg_catalog.pg_index i     on i.indexrelid = c.oid
	     join pg_catalog.pg_class t     on i.indrelid   = t.oid
	where
	        c.relkind = 'i'
	    and n.nspname not in ('pg_catalog', 'pg_toast')
	    and pg_catalog.pg_table_is_visible(c.oid)
</select>
<!-- 
	index의 디테일 정보
	
	and t.relkind = 'r'
	and ix.indisunique = 'true'
	and ix.indisprimary = 'false'
	
 -->
 <select id="indexDetailList" resultClass="com.hangum.tadpole.sql.dao.mysql.InformationSchemaDAO" parameterClass="java.util.Map">
	select
	t.relname as table_name,
	i.relname as index_name,
	a.attname as column_name,
	row_number() over() as seq_in_index,
	0 as column_length,
	0 as char_length,
	'' as "comment",
	ix.indisunique as uniqueness,
	'' as table_owner,
	'' as table_schema,
	ix.indisprimary,
	ix.indoption
	from
	pg_class t,
	pg_class i,
	pg_index ix,
	pg_attribute a
	where
	t.oid = ix.indrelid
	and i.oid = ix.indexrelid
	and a.attrelid = t.oid
	and a.attnum = ANY(ix.indkey)
	and t.relname = #table_name#
	and i.relname = #index_name#
	order by t.relname, i.relname
</select>

<!-- 
	procedure 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
	
	prorettype = 2278 : procedure return type void
	prorettype = 2279 : procedure return type trigger
 -->
<select id="procedureList" resultClass="com.hangum.tadpole.sql.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
	SELECT  proname "name" 
	FROM    pg_catalog.pg_namespace n 
	JOIN    pg_catalog.pg_proc p 
	ON      pronamespace = n.oid 
	WHERE   nspname = 'public'
	and pronargs = 0
	and prorettype = 2278; 
</select>

<!-- 
	function 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="functionList" resultClass="com.hangum.tadpole.sql.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
	SELECT  proname "name" 
	FROM    pg_catalog.pg_namespace n 
	JOIN    pg_catalog.pg_proc p 
	ON      pronamespace = n.oid 
	WHERE   nspname = 'public'
	and pronargs > 0; 
</select>

<!-- 
	show 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	trigger			: trigger name	
	event			: event
	table			: table name
	statement		:
	timing			:
	created			:
	sql_mode		:
	definer			:
	character_set_client	:	
	collation_connection	:
	database				:
	collation				:
 -->
<select id="triggerList" resultClass="com.hangum.tadpole.sql.dao.mysql.TriggerDAO" parameterClass="java.lang.String">
	select tgname "trigger" from pg_trigger 
</select>

<!-- 
	table information
 -->
<select id="tableInformation" resultClass="java.util.HashMap" parameterClass="java.lang.String">
	SELECT a.table_name "name"
	FROM information_schema.tables a
	where a.table_schema = 'public' and 
		a.table_type = 'BASE TABLE'
	ORDER BY name 
</select>

<!-- 
	column information
 -->
<select id="columnInformation" resultClass="com.hangum.tadpole.sql.dao.rdb.RDBInfomationforColumnDAO" parameterClass="java.lang.String">
	SELECT b.table_name
	  , '' as table_comment
	  ,a.column_name
       ,a.data_type 
       ,a.is_nullable as nullable
       ,a.column_default as data_default
	    ,(SELECT 
		    pg_catalog.col_description(attrelid, attnum)
		FROM    pg_catalog.pg_attribute
		WHERE attrelid = (select oid from pg_catalog.pg_class  where relname = a.table_name  ) 
		AND attname= a.column_name 
		AND attnum > 0 
		AND NOT attisdropped )	as "column_comment"			
       ,(SELECT
  			tc.constraint_type 
			FROM 
   				 information_schema.table_constraints AS tc 
  				  JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
			WHERE tc.table_name = a.table_name
			AND kcu.column_name = a.column_name) as "key"
    FROM information_schema.columns a
    	inner join information_schema.tables b on b.table_name= a.table_name
    	where b.table_schema = 'public' 
    	and b.table_type = 'BASE TABLE'
	ORDER BY a.ordinal_position
</select>

<!-- 
	Table DDL Script
 -->
<select id="getTableScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">

  SELECT 
            b.nspname as OWNER,
            b.relname as TABLE_NAME,
            a.attname as COLUMN_NAME,
            pg_catalog.format_type(a.atttypid, a.atttypmod) as DATA_TYPE,
            '' as DATA_TYPE_MOD,
            '' as DATA_TYPE_OWNER,
            CASE WHEN 
                (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
                 FROM pg_catalog.pg_attrdef d
                 WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef) IS NOT NULL THEN
                'DEFAULT '|| (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
                              FROM pg_catalog.pg_attrdef d
                              WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef)
            ELSE
                ''
            END as DATA_DEFAULT,
            CASE WHEN a.attnotnull = true THEN 
                'NOT NULL'
            ELSE
                'NULL'
            END as NULLABLE,
            a.attnum as ATTNUM,
            e.max_attnum as MAX_ATTNUM,
            '' as CHAR_USED,
            0 as DATA_PRECISION,
            0 as DATA_SCALE,
            0 as DATA_LENGTH
        FROM 
            pg_catalog.pg_attribute a
            INNER JOIN 
             (SELECT c.oid,
                n.nspname,
                c.relname
              FROM pg_catalog.pg_class c
                   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
              WHERE c.relname = #table_name#
                AND pg_catalog.pg_table_is_visible(c.oid)
              ORDER BY 2, 3) b
            ON a.attrelid = b.oid
            INNER JOIN 
             (SELECT 
                  a.attrelid,
                  max(a.attnum) as max_attnum
              FROM pg_catalog.pg_attribute a
              WHERE a.attnum > 0 
                AND NOT a.attisdropped
              GROUP BY a.attrelid) e
            ON a.attrelid=e.attrelid
        WHERE a.attnum > 0 
          AND NOT a.attisdropped
        ORDER BY a.attnum
</select>
<!-- 
	Table DDL Script => Table, Column Comment Script
 -->
 
<select id="getTableScript.comments" resultClass="java.lang.String" parameterClass="java.lang.String">
SELECT
    'COMMENT ON TABLE ' || relname || ' IS ''' || pg_catalog.obj_description(oid,'pg_class') || '''' as "comment_text"
  FROM pg_catalog.pg_class ‌
  WHERE 1 = 1 
    AND relkind IN ('r','')
    AND relname IN (
      SELECT a.table_name
        FROM information_schema.tables a
        WHERE a.table_schema = 'public' 
          AND a.table_type = 'BASE TABLE' )
		  AND relname = #table_name#
UNION ALL
	SELECT 
		'COMMENT ON COLUMN ' ||#table_name#||'.'|| ATTNAME || ' IS ''' || pg_catalog.col_description(attrelid, attnum) || '''' 
		FROM   pg_catalog.pg_attribute
		WHERE attrelid = (select oid from pg_catalog.pg_class where relname = #table_name#) 
		AND attnum > 0 
		AND NOT attisdropped
</select>

<!-- 
	Function Script 
	
	pg_get_functiondef(func_oid) : get definition of a function
 -->
 
<select id="getFunctionScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
 SELECT   
 	proname as procedure_name
 	, proargtypes as parameter_types
 	, prorettype as return_types
 	, prosrc as source_text
 FROM    pg_catalog.pg_namespace n   JOIN    pg_catalog.pg_proc p   ON      pronamespace = n.oid   
 WHERE   nspname = 'public'   
 and proname = #object_name#
</select>
 
<!-- 
	Procedure Script 
 -->
 
<select id="getProcedureScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
 SELECT   
 	proname as procedure_name
 	, proargtypes as parameter_types
 	, prorettype as return_types
 	, prosrc as source_text
 FROM    pg_catalog.pg_namespace n   JOIN    pg_catalog.pg_proc p   ON      pronamespace = n.oid   
 WHERE   nspname = 'public'   
 and proname = #object_name#
</select>
 
<select id="getProcedureScript.type" resultClass="java.lang.String" parameterClass="java.lang.Object">
select typname as type_name
from pg_catalog.pg_type
where oid = #oid#;
</select>

<!-- 
	Trigger Script 
	pg_get_triggerdef(trigger_oid)	:	get CREATE [ CONSTRAINT ] TRIGGER command for trigger
 -->
 
<select id="getTriggerScript" resultClass="java.util.HashMap" parameterClass="java.lang.String">
select 
	trigger_name as trigger_name
	, action_timing as action_timing
	, event_manipulation as event_name
	, event_object_table as event_table
	, action_orientation as action_orientation
	, action_statement as action_statement
from information_schema.triggers
where trigger_name = #object_name#
</select>

<!-- 
	Index Script 
	pg_get_indexdef(index_oid)	:	get CREATE INDEX command for index
 -->
 
<select id="getIndexScript" resultClass="java.lang.String" parameterClass="java.lang.String">
select 
	indexdef as indexdef
from pg_catalog.pg_indexes
where indexname = #object_name#
</select>

<!-- 
	View Script 
	pg_get_viewdef(view_oid)	:	get underlying SELECT command for view
 -->
<select id="getViewScript.head" resultClass="java.lang.String" parameterClass="java.lang.String">
  select
  		'CREATE OR REPLACE VIEW ' || table_schema||'.'||table_name || ' AS ' AS SOURCE_TEXT
 from information_schema.views
 where table_name = #view_name#
</select> 
 
<select id="getViewScript.body" resultClass="java.lang.String" parameterClass="java.lang.String">
select 
	definition as definition
from pg_catalog.pg_views
where viewname = #object_name#
</select>

</sqlMap>

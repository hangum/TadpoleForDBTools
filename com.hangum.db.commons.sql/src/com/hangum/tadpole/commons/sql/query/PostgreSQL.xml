<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2012 Cho Hyun Jong.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
  
  Contributors:
      Cho Hyun Jong - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<!-- 
	PostgreSQL 9.1 버전으로 초기 작업을 시작했습니다.
	이전 버전으로는 테스트 못해봤어요.  - 12.08.07
	
	@author hangum	
 -->
<sqlMap namespace="POSTGRESQL_query">

<!-- 
	table 이름
	테이블 코멘트 부분 처리를 못해서... 
	AND relname ~ '^(emp)$' 부분에 AND relname ~ '^(a.table_name)$' 가 들어가야 합니다. 
	
	SELECT a.table_name "name", 
	(
		SELECT 
		  pg_catalog.obj_description(oid, 'pg_class') 
		FROM pg_catalog.pg_class
		WHERE relkind IN ('r','')
		  AND relname ~ '^(emp)$'
		  AND pg_catalog.pg_table_is_visible(oid)
  	) as "comment"
	FROM information_schema.tables a
	where a.table_schema = 'public' and 
		a.table_type = 'BASE TABLE'
	ORDER BY name 
	
 -->
<select id="tableList" resultClass="com.hangum.tadpole.dao.mysql.TableDAO" parameterClass="java.lang.String">
	SELECT a.table_name "name"
	FROM information_schema.tables a
	where a.table_schema = 'public' and 
		a.table_type = 'BASE TABLE'
	ORDER BY name 
</select>

<!-- 
	특정 table의 table이나 view 컬럼 정보
	
	컬럼 설명
	Field			: 컬럼 명
	Type			: 컬럼 타입
	Null			: Null 유무 (예: YES,NO)
	Key				: primary key, foreign key(예: PK, FK)
	Default			: 기본값
	Extra			: 특수컬럼(예: auto_increment)
 -->
<select id="tableColumnList" resultClass="com.hangum.tadpole.dao.mysql.TableColumnDAO" parameterClass="java.util.HashMap">
	SELECT a.column_name AS "FIELD",
       a.data_type  "TYPE",
       a.is_nullable AS "NULL",
       a.column_default as "Default"  ,
       (SELECT
  			tc.constraint_type 
			FROM 
   				 information_schema.table_constraints AS tc 
  				  JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
			WHERE tc.table_name = #table# 
			AND kcu.column_name = a.column_name) as "key",
		(
		SELECT 
		    pg_catalog.col_description(attrelid, attnum)
		FROM 
		    pg_catalog.pg_attribute
		WHERE 
		    attrelid = (select oid from pg_catalog.pg_class where relname = #table#) AND 
		    attname= a.column_name AND 
		    attnum > 0 AND 
		    NOT attisdropped
		)	as "comment"			
    FROM information_schema.columns a
    WHERE a.table_name = #table#
	ORDER BY a.ordinal_position
</select>

<!-- 
	테이블간의 관계 목록 정보를 얻습니다.
	erd 그릴때 관계 목록을 보여주기 위한 목적입니다.
 -->
<select id="referencedTableList"  resultClass="com.hangum.tadpole.dao.mysql.ReferencedTableDAO" parameterClass="java.lang.String">
 SELECT
    tc.constraint_name, 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_name AS referenced_table_name,
    ccu.column_name AS referenced_column_name 
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
    JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
WHERE tc.table_name in ($tables$)
</select>

<!-- 
	모든 관계 테이블 목록을 가져옵니다.
 -->
<select id="referencedTableListALL"  resultClass="com.hangum.tadpole.dao.mysql.ReferencedTableDAO" >
SELECT
    tc.constraint_name, 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_name AS referenced_table_name,
    ccu.column_name AS referenced_column_name 
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
    JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
</select>
	
<!-- 
	db의 view 정보
	
	컬럼 설명
	oebjt_name		: view 이름
 -->
<select id="viewList" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT table_name 
	FROM information_schema.tables 
	where table_schema = 'public' and 
		table_type = 'VIEW'
	ORDER BY table_name
</select>
	
<!-- 
	index 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	table_name			:  	테이블 명
    index_name			:	인덱스 명
    column_name			:	컬럼 명
    column_position		: 
    column_length		:
    char_length			:
    descend				:	
    uniqueness			:
    table_owner			:
    constraint_type		:
    status				:
    #table_schema# AS table_schema
 -->
 <select id="indexList" resultClass="com.hangum.tadpole.dao.mysql.InformationSchemaDAO" parameterClass="java.lang.String">
	select
	     t.relname  as "table_name",
	     c.relname  as "index_name"
	from
	          pg_catalog.pg_class c
	     join pg_catalog.pg_namespace n on n.oid        = c.relnamespace
	     join pg_catalog.pg_index i     on i.indexrelid = c.oid
	     join pg_catalog.pg_class t     on i.indrelid   = t.oid
	where
	        c.relkind = 'i'
	    and n.nspname not in ('pg_catalog', 'pg_toast')
	    and pg_catalog.pg_table_is_visible(c.oid)
</select>

<!-- 
	procedure 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="procedureList" resultClass="com.hangum.tadpole.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
	SELECT  proname "name" 
	FROM    pg_catalog.pg_namespace n 
	JOIN    pg_catalog.pg_proc p 
	ON      pronamespace = n.oid 
	WHERE   nspname = 'public'; 
</select>

<!-- 
	function 상세 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	db				:	db 명
	name			:	procedure 명
	type			:	procedure type
	definer			:	procedure 정의 자
	modified		:	수정일시
	created			:	생성일시
	security_type	:	예를 들어 (DEFINER)
	comment			:
	character_set_client	:	예를 들어 (utf8)
	collation_connection	:	에를 들어 (utf8_general_ci)
	database				:
	collation				:
 -->
<select id="functionList" resultClass="com.hangum.tadpole.dao.mysql.ProcedureFunctionDAO" parameterClass="java.lang.String">
	SELECT  proname "name" 
	FROM    pg_catalog.pg_namespace n 
	JOIN    pg_catalog.pg_proc p 
	ON      pronamespace = n.oid 
	WHERE   nspname = 'public'; 
</select>

<!-- 
	show 내역
	아래 내역은 mysql db의 특성에 맟춘것으로 각 디비의 특성에 맟춥니다.
	
	컬럼 설명
	trigger			: trigger name	
	event			: event
	table			: table name
	statement		:
	timing			:
	created			:
	sql_mode		:
	definer			:
	character_set_client	:	
	collation_connection	:
	database				:
	collation				:
 -->
<select id="triggerList" resultClass="com.hangum.tadpole.dao.mysql.TriggerDAO" parameterClass="java.lang.String">
	select tgname "trigger" from pg_trigger 
</select>

</sqlMap>

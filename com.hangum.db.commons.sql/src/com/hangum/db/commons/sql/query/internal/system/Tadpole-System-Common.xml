<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2012 Cho Hyun Jong.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
  
  Contributors:
      Cho Hyun Jong - initial API and implementation
-->
<!-- 
-사용자 그룹
CREATE TABLE user_group  (
	seq INTEGER PRIMARY KEY AUTOINCREMENT,
	name VARCHAR(60) NOT NULL,
	create_time DATE DEFAULT (datetime('now','localtime')),
	delYn CHAR(3) DEFAULT 'NO'
)

-사용자
-	user_type(admin, manager, user, guest) 
CREATE TABLE   users  (
	seq INTEGER PRIMARY KEY AUTOINCREMENT ,
	group_seq INTEGER NOT NULL, 
	email VARCHAR(60) NOT NULL,
	passwd VARCHAR(60) NOT NULL,
	name VARCHAR(60) NOT NULL,
	user_type VARCHAR(20) NOT NULL DEFAULT 'user',
	approval_yn VARCHAR(3) NOT NULL DEFAULT 'NO' ,
	create_time DATE DEFAULT (datetime('now','localtime')),
	delYn CHAR(3) DEFAULT 'NO',
	UNIQUE(email, user_type),
	FOREIGN KEY (group_seq) REFERENCES user_group  (seq) ON DELETE NO ACTION ON UPDATE NO ACTION
)


- 외부 사용자 디비(amazonRDS, ucloud db)
CREATE TABLE ext_account (
	seq INTEGER PRIMARY KEY AUTOINCREMENT ,
	user_seq INTEGER  NOT NULL,
	types VARCHAR(100) NOT NULL,
	name VARCHAR(1000) NOT NULL,
	value0 VARCHAR(1000) NOT NULL,
	value1 VARCHAR(1000),
	value2 VARCHAR(1000),
	value3 VARCHAR(1000),
	value4 VARCHAR(1000),
	value5 VARCHAR(1000),
	value6 VARCHAR(1000),
	value7 VARCHAR(1000),
	value8 VARCHAR(1000),
	value9 VARCHAR(1000),
	success VARCHAR(10),
	message VARCHAR(1000),
	create_time DATE DEFAULT (datetime('now','localtime')),
    delYn CHAR(3) DEFAULT 'NO',
    UNIQUE(user_seq, types, name),
    FOREIGN KEY (user_seq) REFERENCES users (seq) ON DELETE NO ACTION ON UPDATE NO ACTION
)

-사용자 디비
-// host, port는 sqlite는 값이 없으므로 not null에서 제외 했습니다.
CREATE TABLE user_db (
     seq INTEGER PRIMARY KEY AUTOINCREMENT ,
     user_seq INTEGER  NOT NULL,
     ext_seq INTEGER,
     types     	VARCHAR(50)  	NOT NULL,
     url			VARCHAR(2000)  	NOT NULL,
     db	VARCHAR(50)  	NOT NULL,
     display_name VARCHAR(50)  	NOT NULL,
     host		 VARCHAR(50) 	,
     port		 VARCHAR(10) ,
     locale	VARCHAR(10)		,
     passwd		 VARCHAR(100)  	,
     users		 VARCHAR(100) 	,
     create_time DATE DEFAULT (datetime('now','localtime')),
     delYn CHAR(3) DEFAULT 'NO',
     FOREIGN KEY (user_seq) REFERENCES users (seq) ON DELETE NO ACTION ON UPDATE NO ACTION,
     FOREIGN KEY (ext_seq) REFERENCES ext_account (seq) ON DELETE NO ACTION ON UPDATE NO ACTION
)

-사용자 디비의 RESOURCE SQL, ERD
CREATE TABLE user_db_resource (
     seq INTEGER PRIMARY KEY AUTOINCREMENT ,
     types VARCHAR(10) NOT NULL,
     user_seq INTEGER NOT NULL,
     db_seq INTEGER  NOT NULL,
     filename VARCHAR(2000)  NOT NULL,
     create_time DATE DEFAULT (datetime('now','localtime')),
     delYn CHAR(3) DEFAULT 'NO',
     UNIQUE(types, user_seq, db_seq, filename),
     FOREIGN KEY (user_seq) REFERENCES users (seq) ON DELETE NO ACTION ON UPDATE NO ACTION,
     FOREIGN KEY (db_seq) REFERENCES user_db (seq) ON DELETE NO ACTION ON UPDATE NO ACTION
)

-사용자 디비의 실제 데이터 입력
CREATE TABLE user_db_resource_data (
     seq INTEGER PRIMARY KEY AUTOINCREMENT ,
     user_db_resource_seq INTEGER NOT NULL,
     datas VARCHAR(2000)  NOT NULL,
     FOREIGN KEY (user_db_resource_seq) REFERENCES user_db_resource (seq) ON DELETE NO ACTION ON UPDATE NO ACTION
)

-사용자 프리퍼런스 데이터
CREATE TABLE user_info_data (
	seq INTEGER PRIMARY KEY AUTOINCREMENT,
    user_seq INTEGER NOT NULL,
    db_seq INTEGER  NOT NULL,
    name VARCHAR(40) NOT NULL,
    value0 VARCHAR(2000),
    value1 VARCHAR(2000),
    value2 VARCHAR(2000),
    value3 VARCHAR(2000),
    value4 VARCHAR(2000),
    value5 VARCHAR(2000),
    FOREIGN KEY (user_seq) REFERENCES users (seq) ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (db_seq) REFERENCES user_db (seq) ON DELETE NO ACTION ON UPDATE NO ACTION
)

 -->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
    
<!-- 

	엔지디비는 현재 SQLite, CUBRID 두개의 디비를 지원합니다.
	
 -->

<sqlMap namespace="Tadpole-System-Common">
<!-- 
	============================================================================================================================
	user group
	============================================================================================================================
 -->
 <select id="isUserGroup" resultClass="com.hangum.db.dao.system.UserGroupDAO" parameterClass="com.hangum.db.dao.system.UserGroupDAO">
	SELECT name 
	FROM user_group 
	WHERE 
		name = #name#
</select>

<!-- 
	신규 유저 등록
 -->
<insert id="newGroup" parameterClass="com.hangum.db.dao.system.UserGroupDAO">
	INSERT INTO user_group (seq, name)
	VALUES((select max(seq) from user_group)+1,  #name#)
	
	<selectKey keyProperty="seq" resultClass="int">
		select max(seq) from user_group 
	</selectKey>
</insert>

<select id ="userDBList" resultClass="com.hangum.db.dao.system.UserGroupDAO">
	SELECT * 
	FROM user_group
	WHERE delYn = 'NO'
</select> 


<!--
	user가 있는지 중복 검사 합니다. 
 -->
<select id="isUser" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT email 
	FROM users 
	WHERE 
		email = #email#
</select>

<!-- 
	신규 유저 등록
 -->
<insert id="newUser" parameterClass="com.hangum.db.dao.system.UserDAO">
	INSERT INTO users(group_seq, email, passwd, name, user_type, approval_yn)
	VALUES( #group_seq#, #email#, #passwd#, #name#, #user_type#, #approval_yn#)
	
	<selectKey resultClass="com.hangum.db.dao.system.UserDAO">
		select * from users where email = #email# 
	</selectKey>
</insert>

<!-- 
	로그인
 -->
<select id="login" resultClass="com.hangum.db.dao.system.UserDAO" parameterClass="com.hangum.db.dao.system.UserDAO">
	SELECT * 
	FROM users 
	WHERE 
		email = #email# AND 
		passwd = #passwd#
</select>

<!-- userDB의 manager 권한 리스트 -->
<select id="groupManager" resultClass="com.hangum.db.dao.system.UserDAO" parameterClass="java.lang.Integer">
	select * from users
	where group_seq = #group_seq#
	and user_type='MANAGER'
</select>

<!-- 
	초기 로그인시 유저가 한명이명 인진 조사한다.
	한명이면 로그인화면에 디폴트 유저를 출력해 주기위해서....
 -->
<select id="loginUserCount" resultClass="java.lang.Integer">
	SELECT count(*)
	FROM users
</select>
<select id="onlyOnUser" resultClass="com.hangum.db.dao.system.UserDAO" parameterClass="com.hangum.db.dao.system.UserDAO">
	SELECT * 
	FROM users 
</select>

<!-- 
	권한별 유저 리스트
 -->
 <select id="userListPermissions" resultClass="com.hangum.db.dao.system.ext.UserGroupAUserDAO">
 SELECT a.name user_group_name, 
 	b.seq, group_seq, email, passwd, b.name, user_type, approval_yn, b.delYn, b.create_time 
 FROM user_group a, users b
 WHERE a.seq = b.group_seq
 ORDER BY email
 </select>
 
 <select id="userListGroup" resultClass="com.hangum.db.dao.system.ext.UserGroupAUserDAO" parameterClass="java.lang.Integer">
 SELECT a.name user_group_name, 
 	b.seq, group_seq, email, passwd, b.name, user_type, approval_yn, b.delYn, b.create_time 
 FROM user_group a, users b
 WHERE a.seq = b.group_seq
 	AND b.group_seq = #group_seq#
 ORDER BY email
 </select>
 
<!-- 
	유저의 권한 데이터를 수정합니다.
 -->
<update id="updateUserPermission" parameterClass="com.hangum.db.dao.system.UserDAO">
	UPDATE users SET
		approval_yn = #approval_yn#, delYn = #delYn#
	WHERE seq = #seq#
</update>

<!-- 
	유저의 패스워드 번경
 -->
<update id="updateUserPassword" parameterClass="com.hangum.db.dao.system.UserDAO">
	UPDATE users SET
		passwd = #passwd#
	WHERE seq = #seq#
</update>

<!-- 
	유저를 삭제합니다.
 -->
<delete id="deleteUser" parameterClass="com.hangum.db.dao.system.UserDAO">
	DELETE FROM users WHERE email = #email#
</delete>

<!-- 
	============================================================================================================================
	user db
	============================================================================================================================
 -->
 <!-- 
	1) userDB 중복 저장 용도
	2) 저장 후 seq가져오는 용도로 사용
 -->
<select id="isUserDB" resultClass="com.hangum.db.dao.system.UserDBDAO" parameterClass="com.hangum.db.dao.system.UserDBDAO">
	SELECT * FROM user_db 
	WHERE 
		user_seq = #user_seq# and 
		db = #db# and 
		display_name = #display_name#
	ORDER BY display_name
</select>

<!--  UserDB의 리스트 -->
<select id="userDB" resultClass="com.hangum.db.dao.system.UserDBDAO" parameterClass="java.lang.Integer">
	SELECT * FROM user_db 
	WHERE 
		user_seq = #user_seq# 
</select>

<insert id="userDBInsert" parameterClass="com.hangum.db.dao.system.UserDBDAO">
	INSERT INTO user_db(seq, user_seq, types, url, db, display_name, host, port, locale, passwd, users)
	VALUES( (select max(seq) from user_db)+1 , #user_seq#, #types#, #url#, #db#, #display_name#, #host#, #port#, #locale#, #passwd#, #users#)
</insert>

<delete id="userDBDelete" parameterClass="java.lang.Integer">
	DELETE FROM user_db WHERE seq = #seq#
</delete>

<!-- 
	============================================================================================================================
	user db resource
	============================================================================================================================
 -->
<insert id="userDbResourceInsert" parameterClass="com.hangum.db.dao.system.UserDBResourceDAO">
	INSERT INTO user_db_resource(seq, user_seq, types, db_seq, filename)
	VALUES( (select max(seq) from user_db_resource)+1, #user_seq#, #types#, #db_seq#, #filename#)
	
	<selectKey resultClass="com.hangum.db.dao.system.UserDBResourceDAO">
		SELECT * 
		FROM user_db_resource 
		WHERE user_seq = #user_seq# AND 
			types = #types# AND 
			db_seq = #db_seq# AND 
			filename = #filename#
	</selectKey>
</insert>

<select id="userDbResourceTree" resultClass="com.hangum.db.dao.system.UserDBResourceDAO" parameterClass="com.hangum.db.dao.system.UserDBDAO">
	SELECT * FROM user_db_resource
	WHERE
		user_seq = #user_seq# and
		db_seq = #seq#
	ORDER BY filename
</select>

<select id="userDbResource" resultClass="com.hangum.db.dao.system.UserDBResourceDAO" parameterClass="com.hangum.db.dao.system.UserDBResourceDAO">
	SELECT * FROM user_db_resource
	WHERE
		seq = #seq#
</select>

<!-- 
	1) 데이터 중복 검사쿼리
	2) 데이터 저장 후 seq를 가져오는 용도로도 사용
 -->
<select id="userDBResourceDuplication" resultClass="com.hangum.db.dao.system.UserDBResourceDAO" parameterClass="com.hangum.db.dao.system.UserDBResourceDAO">
	SELECT * FROM user_db_resource
	WHERE
		types = #types# 			and
		user_seq = #user_seq# 	and
		db_seq = #db_seq# 		and
		filename = #filename#
</select>

<delete id="userDBResourceDelete" parameterClass="com.hangum.db.dao.system.UserDBResourceDAO">
	DELETE FROM user_db_resource 
	WHERE
		seq = #seq#
</delete>

<!-- 
	db의 모든 erd를 삭제한다.
 -->
<delete id="userDBResourceDeleteAtDB" parameterClass="java.lang.Integer">
	DELETE FROM user_db_resource 
	WHERE
		db_seq = #db_seq#
</delete>

<!-- 
	resource data를 얻습니다.
 -->
<select id="userDBResourceData" resultClass="com.hangum.db.dao.system.UserDBResourceDataDAO" parameterClass="com.hangum.db.dao.system.UserDBResourceDAO">
	SELECT * FROM user_db_resource_data
	WHERE
		user_db_resource_seq = #seq#
	ORDER BY seq
</select>

<!-- 
	resource data를 저장합니다.
 -->
<insert id="userDbResourceDataInsert" parameterClass="com.hangum.db.dao.system.UserDBResourceDataDAO">
	INSERT INTO user_db_resource_data(seq, user_db_resource_seq, datas)
	VALUES( (select max(seq) from user_db_resource_data)+1, #user_db_resource_seq#, #datas#)
</insert>

<!-- 
	resource data를 삭제합니다.
 -->
<delete id="userDbResourceDataDelete" parameterClass="java.lang.Integer">
	DELETE FROM user_db_resource_data
	WHERE
		user_db_resource_seq = #seq#
</delete>

<!-- 
	=========================================================================================================
	user_info_data 정보를 설정합니다.
	=========================================================================================================
 -->
<select id="allUserInfoData" resultClass="com.hangum.db.dao.system.UserInfoDataDAO" parameterClass="java.lang.Integer">
	SELECT * FROM user_info_data
	WHERE
		user_seq = #user_seq#
</select>

<!-- 
	사용자 정보를 가져온다. 
 -->
<select id="getUserInfoData" resultClass="com.hangum.db.dao.system.UserInfoDataDAO" parameterClass="com.hangum.db.dao.system.UserInfoDataDAO">
	SELECT * FROM user_info_data
	WHERE
		user_seq = #user_seq# AND
		name = #name#
</select>

<!-- 
	사용자 정보를 저장한다. 
 -->
<insert id="userInfoDataInsert" parameterClass="com.hangum.db.dao.system.UserInfoDataDAO">
	INSERT INTO user_info_data(seq, user_seq, db_seq, name, value0, value1, value2, value3, value4, value5)
	VALUES( (select max(seq) from user_info_data)+1, #user_seq#, #db_seq#, #name#, #value0#, #value1#, #value2#, #value3#, #value4#, #value5# )
</insert>

<!-- 
	사용자 정보를 수정합니다.
 -->
<update id="userInfoDataUpdate" parameterClass="com.hangum.db.dao.system.UserInfoDataDAO">
	UPDATE user_info_data 
	SET
		value0 = #value0#,
		value1 = #value1#,
		value2 = #value2#,
		value3 = #value3#,
		value4 = #value4#,
		value5 = #value5#
	WHERE user_seq = #user_seq# AND
		name = #name#
</update>

<!-- 
	SQL Library를 조회한다.
 -->
<select id="sqlLibraryList" resultClass="com.hangum.db.dialogs.message.dao.SQLLibraryDAO" parameterClass="java.util.HashMap">
	select seq, types, user_seq, db_type, title, sqltext, description, delyn
	from user_db_sqlibrary
	where 1=1
	  and db_type = #db_type#
</select>

</sqlMap>
